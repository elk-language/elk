##[
	A tuple data structure backed by an array.

	It is an ordered, immutable collection of integer indexed values.
	A tuple is an immutable list.
]##
sealed primitive class ::Std::ArrayTuple[+Element] < Value
	include Tuple::Base[Element]

	##[
		Returns the number of elements present in the tuple.
	]##
	def length: Int; end

	##[
		Get the element under the given index.

		Throws an unchecked error if the index is a negative number
		or is greater or equal to `length`.
	]##
	def [](index: AnyInt): Element; end

	##[
		Create a new `ArrayTuple` containing the elements of `self`
		and another given `ArrayTuple`.
	]##
	sealed def +[E](other: ArrayTuple[E]): ArrayTuple[Element | E]; end

	##[
		Create a new `ArrayTuple` containing the elements of `self`
		repeated `n` times.
	]##
	sealed def *(n: Int): ArrayTuple[Element]; end

	##[
		Check whether the given value is an `ArrayTuple`
		with the same elements.
	]##
	sealed def ==(other: any): Bool; end

	##[
		Check whether the given value is an `ArrayTuple` or `ArrayList`
		with the same elements.
	]##
	sealed def =~(other: any): Bool; end

	##[
		Iterates over the elements of this tuple,
		yielding them to the given closure.

		Returns a new Tuple that consists of the elements returned
		by the given closure.
	]##
	def map[E](fn: |element: Element|: E): ArrayTuple[E]; end

	##[
		Returns an iterator that iterates
		over each element of the tuple.
	]##
	def iter: Iterator[Element]; end

	sealed primitive class Iterator[+Element]
		include ::Std::Iterator::Base[Element]

		##[
			Get the next element of the tuple.
			Throws `:stop_iteration` when there are no more elements.
		]##
		def next: Element ! :stop_iteration; end
	end
end
