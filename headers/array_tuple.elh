##[
	A tuple data structure backed by an array.

	It is an ordered, immutable collection of integer indexed values.
	A tuple is an immutable list.
]##
sealed primitive class ::Std::ArrayTuple[+Val]
	include Tuple[Val]

	##[
		Returns the number of elements present in the tuple.
	]##
	def length: Int; end

	##[
		Get the element under the given index.

		Throws an unchecked error if the index is a negative number
		or is greater or equal to `length`.
	]##
	def [](index: AnyInt): Val; end

	##[
		Create a new `ArrayTuple` containing the elements of `self`
		and another given `Tuple`.
	]##
	sealed def +[V](other: Tuple[V]): ArrayTuple[Val | V]; end

	##[
		Create a new `ArrayTuple` containing the elements of `self`
		repeated `n` times.
	]##
	sealed def *(n: Int): ArrayTuple[Val]; end

	##[
		Check whether the given value is an `ArrayTuple`
		with the same elements.
	]##
	sealed def ==(other: any): Bool; end

	##[
		Check whether the given value is an `ArrayTuple` or `ArrayList`
		with the same elements.
	]##
	sealed def =~(other: any): Bool; end

	##[
		Iterates over the elements of this tuple,
		yielding them to the given closure.

		Returns a new Tuple that consists of the elements returned
		by the given closure.
	]##
	def map[V, E](fn: |element: Val|: V ! E): ArrayTuple[V] ! E; end

	##[
		Returns an iterator that iterates
		over each element of the tuple.
	]##
	def iter: Iterator[Val]; end

	sealed primitive class Iterator[+Val]
		include ::Std::ResettableIterator::Base[Val]

		init(tuple: ArrayTuple[Val]); end

		##[
			Get the next element of the tuple.
			Throws `:stop_iteration` when there are no more elements.
		]##
		def next: Val ! :stop_iteration; end

		##[
			Resets the state of the iterator.
		]##
		def reset; end
	end
end
