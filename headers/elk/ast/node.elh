module ::Std::Elk::AST
	##[
		A base for all Elk AST (Abstract Syntax Tree) nodes.
	]##
	mixin Node
		##[
			Indicates that the format of some AST node is
			invalid.
		]##
		class FormatError < ::Std::FormatError; end

		singleton
			##[
				Convert the given AST Node, or collection of nodes into
				an expression.
			]##
			def expr(node: StatementNode | ArrayTuple[StatementNode]): ExpressionNode; end

			##[
				Wrap the given node in an unhygienic node.
				It enables macro-generated code to access
				local variables from outer scopes.
			]##
			def unhygienic(node: Node): UnhygienicNode; end
		end

		##[
			Returns the span that represents
			the position of this node in a source file/string.
		]##
		def location: FS::Location; end

		##[
			Convert the AST back to a `String` of source code.
		]##
		def to_string: String; end

		##[
			Returns self.
		]##
		def to_ast_node: self; end

		def inspect: String; end

		##[
			Visit all nodes of this AST
			passing them as arguments to the given closure.

			The closure should return `true` to continue
			traversing the tree, `false` will be treated as a `break` and will
			stop the traversal.
		]##
		def traverse(fn: |node: Node|: bool): bool; end

		##[
			Create a new iterator by eagerly traversing the entire AST
			and collecting its nodes to a collection.
		]##
		def iter: Iterator[Node]; end

		##[
			Represents a value that can be converted to an Elk AST Node.
		]##
		interface Convertible
			##[
				Converts the value to an Elk AST Node.
			]##
			def to_ast_node: Node; end
		end
	end
end
