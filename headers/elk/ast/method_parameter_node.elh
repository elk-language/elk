module Std::Elk::AST
  ##[
    Represents a formal parameter in method declarations eg. `foo: String = 'bar'`
  ]##
  sealed primitive class MethodParameterNode
    include ParameterNode

    init(
      name: String,
      type_node: TypeNode,
      initialiser: ExpressionNode,
      set_instance_variable: bool,
      kind: UInt8,
      span: String::Span = loop; end,
    ); end

    def name: String; end
    def type_node: TypeNode; end
    def initialiser: ExpressionNode; end
    def set_instance_variable: Bool; end
    def span: String::Span; end

    ##[
      Returns an integer that determines whether
      the parameter is a normal, positional rest or named rest parameter.

      Valid values are available as constants under `Std::Elk::AST::ParameterNode`:
      - `NORMAL_KIND`
      - `POSITIONAL_REST_KIND`
      - `NAMED_REST_KIND`
    ]##
    def kind: UInt8; end

		##[
			Whether the parameter is optional (has a default value).
			eg. `foo: String = "lol"`
		]##
		def is_optional: bool; end

		##[
			Whether the parameter is normal
			(not a positional rest parameter, not a named rest parameter).

			eg. `foo: String`
		]##
		def is_normal: bool; end

		##[
			Whether it's a positional rest parameter eg `*foo: String`
		]##
		def is_positional_rest: bool; end

		##[
			Whether it's a named rest parameter eg `**foo: String`
		]##
		def is_named_rest: bool; end
  end
end
