##[
	Represents an integer (a whole number like `1`, `2`, `3`, `-5`, `0`).

	This integer type is automatically resized so
	it can hold an arbitrarily large/small number.
]##
sealed noinit primitive class ::Std::Int < Value
	implement Hashable

	def times(fn: |i: Int|); end

	##[
		Returns itself.

		```
			var a = 1
			+a #=> 1
		```
	]##
	sealed def +@: Int; end

	##[
		Returns the result of negating the integer.

		```
			var a = 1
			-a #=> -1
		```
	]##
	sealed def -@: Int; end

	##[
		Returns the result of applying bitwise NOT on the bits
		of this integer.

		```
			~4 #=> -5
		```
	]##
	sealed def ~: Int; end

	##[
		Get the next integer by incrementing by `1`.
	]##
	sealed def ++: Int; end

	##[
		Get the previous integer by decrementing by `1`.
	]##
	sealed def --: Int; end

	##[
		Add `other` to this integer.
	]##
	sealed def +(other: Int): Int; end

	##[
		Subtract `other` from this integer.
	]##
	sealed def -(other: Int): Int; end

	##[
		Multiply this integer by `other`.
	]##
	sealed def *(other: Int): Int; end

	##[
		Divide this integer by another integer.
		Throws an unchecked runtime error when dividing by `0`.
	]##
	sealed def /(other: Int): Int; end

	##[
		Exponentiate this integer, raise it to the power of `other`.
	]##
	sealed def **(other: Int): Int; end

	##[
		Compare this integer with another integer.
		Returns `1` if it is greater, `0` if they're equal, `-1` if it's less than the other.
	]##
	sealed def <=>(other: CoercibleNumeric): Int; end

	sealed def >=(other: CoercibleNumeric): Bool; end

	sealed def >(other: CoercibleNumeric): Bool; end

	sealed def <=(other: CoercibleNumeric): Bool; end

	sealed def <(other: CoercibleNumeric): Bool; end

	##[
		Returns an integer shifted left by `other` positions, or right if `other` is negative.
	]##
	sealed def <<(other: AnyInt): Int; end

	##[
		Returns an integer shifted right by `other` positions, or left if `other` is negative.
	]##
	sealed def >>(other: AnyInt): Int; end

	##[
		Performs bitwise AND.
	]##
	sealed def &(other: Int): Int; end

	##[
		Performs bitwise AND NOT (bit clear).
	]##
	sealed def &~(other: Int): Int; end

	##[
		Performs bitwise OR.
	]##
	sealed def |(other: Int): Int; end

	##[
		Performs bitwise XOR.
	]##
	sealed def ^(other: Int): Int; end

	##[
		Returns the remainder of dividing by `other`.

		```
			var a = 10
			var b = 3
			a % b #=> 1
		```
	]##
	sealed def %(other: Int): Int; end

	##[
		Returns itself.
	]##
	def to_int: Int; end

	##[
		Return a human readable string
		representation of this object
		for debugging etc.
	]##
	def inspect: String; end

	##[
		Converts the integer to a string.
	]##
	def to_string: String; end

	##[
		Converts the integer to a floating point number.
	]##
	def to_float: Float; end

	##[
		Converts the integer to a 64-bit floating point number.
	]##
	def to_float64: Float64; end

	##[
		Converts the integer to a 32-bit floating point number.
	]##
	def to_float32: Float32; end

	##[
		Converts the integer to a 64-bit integer.
	]##
	def to_int64: Int64; end

	##[
		Converts the integer to a 32-bit integer.
	]##
	def to_int32: Int32; end

	##[
		Converts the integer to a 16-bit integer.
	]##
	def to_int16: Int16; end

	##[
		Converts the integer to a 8-bit integer.
	]##
	def to_int8: Int8; end

	##[
		Converts the integer to an unsigned 64-bit integer.
	]##
	def to_uint64: UInt64; end

	##[
		Converts the integer to an unsigned 32-bit integer.
	]##
	def to_uint32: UInt32; end

	##[
		Converts the integer to an unsigned 16-bit integer.
	]##
	def to_uint16: UInt16; end

	##[
		Converts the integer to an unsigned 8-bit integer.
	]##
	def to_uint8: UInt8; end

	##[
		Calculates a hash of the int.
	]##
	def hash: UInt64; end

	##[
		Returns the duration equivalent to `self` nanoseconds.
	]##
	def nanoseconds: Duration; end
	alias nanosecond nanoseconds

	##[
		Returns the duration equivalent to `self` microseconds.
	]##
	def microseconds: Duration; end
	alias microsecond microseconds

	##[
		Returns the duration equivalent to `self` milliseconds.
	]##
	def milliseconds: Duration; end
	alias millisecond milliseconds

	##[
		Returns the duration equivalent to `self` seconds.
	]##
	def seconds: Duration; end
	alias second seconds

	##[
		Returns the duration equivalent to `self` minutes.
	]##
	def minutes: Duration; end
	alias minute minutes

	##[
		Returns the duration equivalent to `self` hours.
	]##
	def hours: Duration; end
	alias hour hours

	##[
		Returns the duration equivalent to `self` days.
	]##
	def days: Duration; end
	alias day days

	##[
		Returns the duration equivalent to `self` weeks.
	]##
	def weeks: Duration; end
	alias week weeks

	##[
		Returns the duration equivalent to `self` years.
	]##
	def years: Duration; end
	alias year years

end
