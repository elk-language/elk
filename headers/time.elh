##[
	Represents a time of day with nanosecond precision.
]##
sealed primitive class ::Std::Time
	singleton
		##[
			Returns the current time.
		]##
		def now: Time; end

		##[
			Parse the time string according to the given format.
		]##
		def parse(format: String, input: String): Time ! FormatError; end
	end

	const DEFAULT_FORMAT: String

	##[
		Create a string formatted according to the given format string.
	]##
	def strftime(fmt: String): String; end
	alias format strftime

	def to_string: String; end
	def to_time_span: Time::Span; end

	##[
		Returns the hour offset within the day specified by `self` in the range `0...23`
	]##
	def hour: Int; end

	##[
		Returns the minute offset within the hour specified by `self` in the range `0...59`
	]##
	def minute: Int; end

	##[
		Returns the second offset within the minute specified by `self` in the range `0...59`
	]##
	def second: Int; end

	##[
		Returns the millisecond offset within the second specified by `self` in the range `0...999`
	]##
	def millisecond: Int; end

	##[
		Returns the microsecond offset within the millisecond specified by `self` in the range `0...999`
	]##
	def microsecond: Int; end

	##[
		Returns the microsecond offset within the second specified by `self` in the range `0...999_999`
	]##
	def microseconds_in_second: Int; end

	##[
		Returns the nanosecond offset within the microsecond specified by `self` in the range `0...999`
	]##
	def nanosecond: Int; end

	##[
		Returns the nanosecond offset within the second specified by `self` in the range `0...999_999_999`
	]##
	def nanoseconds_in_second: Int; end

	##[
		Returns the picosecond offset within the second specified by `self` in the range `0...999_999_999_999`
	]##
	def picoseconds_in_seconds: Int; end

	##[
		Returns the femtosecond offset within the second specified by `self` in the range `0...999_999_999_999_999`
	]##
	def femtoseconds_in_second: Int; end

	##[
		Returns the attosecond offset within the second specified by `self` in the range `0...999_999_999_999_999_999`
	]##
	def attoseconds_in_second: Int; end

	##[
		Returns the zeptosecond offset within the second specified by `self` in the range `0...999_999_999_999_999_999_999`
	]##
	def zeptoseconds_in_second: Int; end

	##[
		Returns the yoctosecond offset within the second specified by `self` in the range `0...999_999_999_999_999_999_999_999`
	]##
	def yoctoseconds_in_second: Int; end

	##[
		Returns the number of seconds elapsed since January 1, 1970 UTC
	]##
	def unix_seconds: Int; end

	##[
		Returns the number of milliseconds elapsed since January 1, 1970 UTC
	]##
	def unix_milliseconds: Int; end

	##[
		Returns the number of microseconds elapsed since January 1, 1970 UTC
	]##
	def unix_microseconds: Int; end

	##[
		Returns the number of nanoseconds elapsed since January 1, 1970 UTC
	]##
	def unix_nanoseconds: Int; end

	##[
		Returns the number of picoseconds elapsed since January 1, 1970 UTC
	]##
	def unix_picoseconds: Int; end

	##[
		Returns the number of femtoseconds elapsed since January 1, 1970 UTC
	]##
	def unix_femtoseconds: Int; end

	##[
		Returns the number of attoseconds elapsed since January 1, 1970 UTC
	]##
	def unix_attoseconds: Int; end

	##[
		Returns the number of zeptoseconds elapsed since January 1, 1970 UTC
	]##
	def unix_zeptoseconds: Int; end

	##[
		Returns the number of yoctoseconds elapsed since January 1, 1970 UTC
	]##
	def unix_yoctoseconds: Int; end

	##[
		Returns `"AM"` or `"PM"` based on the hour.
	]##
	def meridiem: String; end

	##[
		Returns the hour of the day in a twelve hour clock.
	]##
	def hour12: Int; end

	sealed def >=(other: Time): bool; end

	sealed def >(other: Time): bool; end

	sealed def <=(other: Time): bool; end

	sealed def <(other: Time): bool; end

end
