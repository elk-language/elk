##[
	Represents the elapsed time between two Times as an int64 nanosecond count.
	 The representation limits the largest representable duration to approximately 290 years.
]##
sealed primitive class ::Std::Duration < Value
	singleton
		##[
			Parses a duration string and creates a Duration value.
			A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m".
			Valid time units are "ns", "us" (or "Âµs"), "ms", "s", "m", "h".
		]##
		def parse(s: String): Duration; end

		##[
			Returns the amount of elapsed since the given `Time`.
		]##
		def since(time: Time): Duration; end

		##[
			Returns the amount of time that is left until the given `Time`.
		]##
		def until(time: Time): Duration; end
	end

	def +(other: Duration): Duration; end
	def -(other: Duration): Duration; end
	def *(other: CoercibleNumeric): Duration; end
	def /(other: CoercibleNumeric): Duration; end

	##[
		Returns the string representation of the duration in the format "51h15m0.12s".
	]##
	def to_string: String; end

	##[
		Returns the count of nanoseconds in this duration as a Float.
	]##
	def in_nanoseconds: Float; end

	##[
		Returns the count of nanoseconds in this duration as an Int.
	]##
	def nanoseconds: Int; end

	##[
		Returns the count of nanoseconds in this duration modulo 1000 as an Int.
		Range of values: 0...999
	]##
	def nanoseconds_mod: Int; end

	##[
		Returns the count of microseconds in this duration as an Int.
	]##
	def in_microseconds: Float; end

	##[
		Returns the count of microseconds in this duration as a Float.
	]##
	def microseconds: Int; end

	##[
		Returns the count of microseconds in this duration modulo 1000 as a Float.
		Range of values: 0...999
	]##
	def microseconds_mod: Int; end

	##[
		Returns the count of milliseconds in this duration as a Float.
	]##
	def in_milliseconds: Float; end

	##[
		Returns the count of milliseconds in this duration as an Int.
	]##
	def milliseconds: Int; end

	##[
		Returns the count of milliseconds in this duration modulo 1000 as an Int.
		Range of values: 0...999
	]##
	def milliseconds_mod: Int; end

	##[
		Returns the count of seconds in this duration as a Float.
	]##
	def in_seconds: Float; end

	##[
		Returns the count of seconds in this duration as an Int.
	]##
	def seconds: Int; end

	##[
		Returns the count of seconds in this duration modulo 60 as an Int.
		Range of values: 0...59
	]##
	def seconds_mod: Int; end

	##[
		Returns the count of minutes in this duration as a Float.
	]##
	def in_minutes: Float; end

	##[
		Returns the count of minutes in this duration as an Int.
	]##
	def minutes: Int; end

	##[
		Returns the count of minutes in this duration modulo 60 as an Int.
		Range of values: 0...59
	]##
	def minutes_mod: Int; end

	##[
		Returns the count of hours in this duration as a Float.
	]##
	def in_hours: Float; end

	##[
		Returns the count of hours in this duration as an Int.
	]##
	def hours: Int; end

	##[
		Returns the count of hours in this duration modulo 24 as an Int.
		Range of values: 0...23
	]##
	def hours_mod: Int; end

	##[
		Returns the count of days in this duration as a Float.
	]##
	def in_days: Float; end

	##[
		Returns the count of days in this duration as an Int.
	]##
	def days: Int; end

	##[
		Returns the count of weeks in this duration as a Float.
	]##
	def in_weeks: Float; end

	##[
		Returns the count of weeks in this duration as an Int.
	]##
	def weeks: Int; end

	##[
		Returns the count of years in this duration as a Float.
	]##
	def in_years: Float; end

	##[
		Returns the count of years in this duration as an Int.
	]##
	def years: Int; end

end
