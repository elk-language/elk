##[
	An interface that represents an ordered, immutable collection
	of elements indexed by integers starting at `0`.
]##
interface ::Std::Tuple[+Element]
	implement ImmutableCollection[Element]

	##[
		Get the element under the given index.

		Throws an unchecked error if the index is a negative number
		or is greater or equal to `length`.
	]##
	sig [](index: AnyInt): Element

	# Base methods

	##[
		Get the element under the given index.

		Throws an error if the index is a negative number
		or is greater or equal to `length`.
	]##
	sig at(index: AnyInt): Element ! OutOfRangeError

	##[
		Get the element under the given index.

		Returns `nil` if the index is a negative number
		or is greater or equal to `length`.
	]##
	sig try_at(index: AnyInt): Element?

	##[
		Iterates over the elements of this tuple,
		yielding them to the given closure.

		Returns a new tuple that consists of the elements returned
		by the given closure.
	]##
	sig map[E](fn: |element: Element|: E): Tuple[E]

	##[
		Provides default implementations of optional tuple methods.
	]##
	abstract mixin Base[+Element]
		implement Tuple[Element]
		include ImmutableCollection::Base[Element]

		def at(index: AnyInt): Element ! OutOfRangeError; end
		def try_at(index: AnyInt): Element?; end
		def map[E](fn: |element: Element|: E): Tuple[E]; end
	end
end
