##[
	A `Channel` is an object tha can be used to send and receive values.
	Its useful for communicating between multiple threads of execution.

	## Instantiation

	You can specify the capacity of the channel.
	A channel with `0` capacity is called an unbuffered channel.
	Channels with positive capacity are called buffered channel.

	```
	# instantiate an unbuffered channel of `String` values
	unbuffered_channel := Channel::[String]()

	# instantiate a buffered channel of `Int` values, that can hold up to 5 integers
	buffered_channel := Channel::[Int](5)
	```

	## Pushing values

	You can send values to the channel using the `<<` operator.
	Unbuffered channels will block the current thread until the pushed value
	is popped by another thread.
	Buffered channels will not block the current thread if there is enough capacity for another value.

	```
	ch := Channel::[Int]() # instantiate a channel of `Int` values
	ch << 5 # send `5` to the channel
	```

	Pushing values to a closed channel will result in an unchecked error being thrown.

	## Popping values

	You can receive values from the channel using the `pop` method.
	Unbuffered channels will block the current thread until a value is available.
	Buffered channels will not block the current thread if there is a value in the channel's buffer.

	```
	ch := Channel::[Int](3) # instantiate a buffered channel of `Int` values
	ch << 5 # send `5` to the channel
	v := try ch.pop # pop `5` from the channel
	```

	if the channel is closed `pop` will throw `:channel_closed`

	## Closing channels

	You can close a channel using the `close` method when you no longer wish to send values to it.
	Channels should only be closed by the producer (the thread that pushes values to the channel).
	Closing a closed channel will result in an unchecked error being thrown.
]##
sealed primitive class ::Std::Channel[V]
	include Iterable::FiniteBase[V]
	implement Closable

	##[
		Create a new `Channel` with the given capacity.
		Default capacity is `0`.
	]##
	init(capacity: Int = 0); end

	##[
		Returns the size of the buffer that can hold elements
		until they're popped.
	]##
	def capacity: Int; end

	##[
		Returns the amount of elements present in the buffer.
	]##
	def length: Int; end

	##[
		Returns the amount of slots in the buffer that are available for new elements.
	]##
	def left_capacity: Int; end

	##[
		Pushes a new element to the channel.
		Blocks the current thread until another thread pops the element if the channel does not have any empty slots in the buffer.

		Pushing to a closed channel throws an unchecked error.
	]##
	def <<(value: V): self; end

	##[
		Pops an element from the channel.
		Blocks the current thread until another thread pushes an element if the channel does not have any values in the buffer.

		Popping from a closed channel throws `:closed_channel`.
	]##
	def pop: V ! :closed_channel; end

	##[
		Closes the channel, preventing any more values from being pushed or popped.

		Closing a closed channel results in an unchecked error.
	]##
	def close; end

	def next: V ! :stop_iteration; end

	def iter: self; end
end
