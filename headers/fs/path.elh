module ::Std::FS
  ##[
    Represents a file system path.
    Paths are immutable and safe to use by multiple threads.
  ]##
  sealed primitive class Path
    class Error < ::Std::Error; end

    singleton
      ##[
        Create a new path from a slash-separated string.
      ]##
      def from_slash(path: String): Path; end

      ##[
        Create a new path from a list of elements.
        Uses the OS-specific separator.
      ]##
      def build(*elements: String): Path; end
    end

    init(path: String); end

    ##[
      Reports whether the path is absolute.
    ]##
    def is_absolute: bool; end

    ##[
      Reports whether the path is local.
      It is a primitive lexical check it does not take into account
      symbolic links etc
    ]##
    def is_local: bool; end

    ##[
      Returns the path as a `String`.
    ]##
    def to_string: String; end

    ##[
      Returns the path as a slash `"/"` separated `String`.
    ]##
    def to_slash_string: String; end

    ##[
      Returns the path as a backslash `"\\"` separated `String`.
    ]##
    def to_backslash_string: String; end

    ##[
      VolumeName returns leading volume name.
      Given "C:\foo\bar" it returns "C:" on Windows.
      Given "\\host\share\foo" it returns "\\host\share". On other platforms it returns "".
    ]##
    def volume_name: String; end

    ##[
      Split the path into individual elements
      separated by the OS separator (`/` or `\`)
    ]##
    def split: ArrayList[String]; end

    ##[
      Returns a path based on `self` that is
      the shortest possible version of it based on lexical analysis.
    ]##
    def normalize: Path; end

    ##[
      Returns a path based on `self` omitting the last element.
      Typically this would result in the path to the parent directory.
    ]##
    def dir: Path; end

    ##[
      Returns the absolute version of this path.
      If the path is not absolute it will be joined with the current working directory to turn it into an absolute path.
    ]##
    def to_absolute: Path; end

    ##[
      Returns a path based on `target` that is relative to `self`.
    ]##
    def to_relative(target: Path): Path; end

    ##[
      Returns the last element of the path.
      Typically this is the name of the file.
    ]##
    def base: String; end

    ##[
      Returns the extension of the file.
      The extension is the suffix beginning at the final dot in the final element of path; it is empty if there is no dot.

      ```
      FS::Path("index").extension #=> ""
      FS::Path("index.js").extension #=> ".js"
      FS::Path("index.html.erb").extension #=> ".erb"
      ```
    ]##
    def extension: String; end

    ##[
      Checks whether the path matches the given glob pattern.
    ]##
    def matches_glob(patten: String): bool; end
  end
end
