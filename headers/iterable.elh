##[
	Represents a value that can be iterated over in a `for` loop.
]##
interface ::Std::PrimitiveIterable[+Val]
	##[
		Returns an iterator for this structure.
	]##
	sig iter: Iterator[Val]
end

##[
	Represents a value that can be iterated over in a `for` loop and implement
	many useful methods.
]##
interface ::Std::Iterable[+Val]
	implement PrimitiveIterable[Val]
	implement Inspectable

	class NotFoundError < Error; end

	# TODO
	# Base methods

	##[
		Check whether the given `value` is present in this iterable.

		Never returns if the iterable is infinite.
	]##
	sig contains[V := Val](value: V): bool

	##[
		Checks whether the iterable is empty.
	]##
	sig is_empty: bool

	##[
		Returns the number of elements present in the iterable.

		Never returns if the iterable is infinite.
	]##
	sig length: Int

	##[
		Returns the first element.
		Throws an unchecked error when the iterable is empty.
	]##
	sig first: Val

	##[
		Returns the first element.
		Returns `nil` when the iterable is empty.
	]##
	sig try_first: Val?

	##[
		Returns the first element.
		Throws an error when the iterable is empty.
	]##
	sig first_err: Val ! NotFoundError

	##[
		Returns the first element.
		Throws an unchecked error when the iterable is empty.

		Never returns if the iterable is infinite.
	]##
	sig last: Val

	##[
		Returns the first element.
		Returns `nil` when the collection is empty.

		Never returns if the iterable is infinite.
	]##
	sig try_last: Val?

	##[
		Returns the last element.
		Throws an error when the iterable is empty.

		Never returns if the iterable is infinite.
	]##
	sig last_err: Val ! NotFoundError

	##[
		Iterates over the elements of this iterable,
		yielding them to the given closure.

		Returns a new iterable that consists of the elements returned
		by the given closure.

		Never returns if the iterable is infinite.
	]##
	sig map[V, E](fn: |element: Val|: V ! E): Iterable[V] ! E

	##[
		Returns a new iterable containing only elements matching the given predicate.

		Never returns if the iterable is infinite.
	]##
	sig filter[E](fn: |element: Val|: bool ! E): self ! E

	##[
		Returns the number of elements matching the given predicate.

		Never returns if the iterable is infinite.
	]##
	sig count[E](fn: |element: Val|: bool ! E): Int ! E

	##[
		Returns a new iterable containing only elements not matching the given predicate.

		Never returns if the iterable is infinite.
	]##
	sig reject[E](fn: |element: Val|: bool ! E): self ! E

	##[
		Checks whether any element of this iterable satisfies the given predicate.

		May never return if the iterable is infinite.
	]##
	sig any[E](fn: |element: Val|: bool ! E): bool ! E

	##[
		Checks whether every element of this iterable satisfies the given predicate.
		Never returns if the iterable is infinite.
	]##
	sig every[E](fn: |element: Val|: bool ! E): bool ! E

	##[
		Returns the first element matching the given predicate.
		Returns `nil` otherwise.

		May never return if the iterable is infinite.
	]##
	sig find[E](fn: |element: Val|: bool ! E): Val? ! E

	##[
		Returns the first element matching the given predicate.
		Throws an error otherwise.

		May never return if the iterable is infinite.
	]##
	sig find_err[E](fn: |element: Val|: bool ! E): Val ! NotFoundError | E

	##[
		Returns the first index of element, or -1 if it could not be found.

		May never return if the iterable is infinite.
	]##
	sig index_of[V := Val](element: V): Int

	##[
		Returns a new iterable containing all elements except first `n` elements.

		Never returns if the iterable is infinite.
	]##
	sig drop(n: Int): self

	##[
		Returns a new iterable containing all elements except first elements that satisfy the given predicate.

		Never returns if the iterable is infinite.
	]##
	sig drop_while[E](fn: |element: Val|: bool ! E): self ! E

	##[
		Returns a new iterable containing only the first `n` elements.
	]##
	sig take(n: Int): self

	##[
		Returns a new iterable containing first elements satisfying the given predicate.

		May never return if the iterable is infinite.
	]##
	sig take_while[E](fn: |element: Val|: bool ! E): self ! E

	##[
		Reduces the elements of this iterable to a single value by
		iteratively combining them using the provided function.

		Never returns if the iterable is infinite.
	]##
	sig reduce[A, E](fn: |accum: A, element: Val|: A ! E): A ! E

	##[
		Reduces the elements of this iterable to a single value by
		iteratively combining each element with an initial value using the provided function.

		Never returns if the iterable is infinite.
	]##
	sig fold[I, E](initial: I, fn: |accum: I, element: Val|: I ! E): I ! E

	##[
		Creates a new list that contains the elements of this iterable.

		Never returns if the iterable is infinite.
	]##
	sig to_list[T > Val]: List[T]

	##[
		Creates a new tuple that contains the elements of this iterable.

		Never returns if the iterable is infinite.
	]##
	sig to_tuple: Tuple[Val]

	##[
		Creates a new immutable collection that contains the elements of this iterable.

		Never returns if the iterable is infinite.
	]##
	sig to_immutable_collection: ImmutableCollection[Val]

	##[
		Creates a new collection that contains the elements of this iterable.

		Never returns if the iterable is infinite.
	]##
	sig to_collection[T > Val]: Collection[T]

	##[
		Provides default implementations of most iterable methods
		for finite iterables.
	]##
	abstract mixin FiniteBase[+Val]
		implement Iterable[Val]

		def contains[V := Val](value: V): bool; end
		def is_empty: bool; end
		def first: Val; end
		def try_first: Val?; end
		def first_err: Val ! NotFoundError; end
		def last: Val; end
		def try_last: Val?; end
		def last_err: Val ! NotFoundError; end
		def map[V, E](fn: |element: Val|: V ! E): Iterable[V] ! E; end
		def filter[E](fn: |element: Val|: bool ! E): self ! E; end
		def count[E](fn: |element: Val|: bool ! E): Int ! E; end
		def reject[E](fn: |element: Val|: bool ! E): self ! E; end
		def any[E](fn: |element: Val|: bool ! E): bool ! E; end
		def every[E](fn: |element: Val|: bool ! E): bool ! E; end
		def find[E](fn: |element: Val|: bool ! E): Val? ! E; end
		def find_err[E](fn: |element: Val|: bool ! E): Val ! NotFoundError | E; end
		def index_of[V := Val](element: V): Int; end
		def drop(n: Int): self; end
		def drop_while[E](fn: |element: Val|: bool ! E): self ! E; end
		def take(n: Int): self; end
		def take_while[E](fn: |element: Val|: bool ! E): self ! E; end
		def reduce[A, E](fn: |accum: A, element: Val|: A ! E): A ! E; end
		def fold[I, E](initial: I, fn: |accum: I, element: Val|: I ! E): I ! E; end
		def to_list[T > Val]: List[T]; end
		def to_tuple: Tuple[Val]; end
		def to_immutable_collection: ImmutableCollection[Val]; end
		def to_collection[T > Val]: Collection[T]; end
	end

	##[
		Provides default implementations of most iterable methods.
	]##
	abstract mixin Base[+Val]
		include FiniteBase[Val]

		def length: Int; end
	end
end