##[
	Represents a value that can be iterated over in a `for` loop.
]##
interface ::Std::Iterable[+Element]
	class NotFoundError < Error; end

	##[
		Returns an iterator for this structure.
	]##
	sig iterator: Iterator[Element]

	# TODO
	# Base methods

	##[
		Check whether the given `value` is present in this iterable.

		Never returns if the iterable is infinite.
	]##
	sig contains[E > Element](value: E): bool

	##[
		Checks whether the iterable is empty.
	]##
	sig is_empty: bool

	##[
		Returns the number of elements present in the iterable.

		Never returns if the iterable is infinite.
	]##
	sig length: Int

	##[
		Returns the first element.
		Throws an unchecked error when the iterable is empty.
	]##
	sig first: Element

	##[
		Returns the first element.
		Returns `nil` when the iterable is empty.
	]##
	sig try_first: Element?

	##[
		Returns the first element.
		Throws an error when the iterable is empty.
	]##
	sig first_err: Element ! NotFoundError

	##[
		Returns the first element.
		Throws an unchecked error when the iterable is empty.

		Never returns if the iterable is infinite.
	]##
	sig last: Element

	##[
		Returns the first element.
		Returns `nil` when the collection is empty.

		Never returns if the iterable is infinite.
	]##
	sig try_last: Element?

	##[
		Returns the last element.
		Throws an error when the iterable is empty.

		Never returns if the iterable is infinite.
	]##
	sig last_err: Element ! NotFoundError

	##[
		Iterates over the elements of this iterable,
		yielding them to the given closure.

		Returns a new iterable that consists of the elements returned
		by the given closure.

		Never returns if the iterable is infinite.
	]##
	sig map[E](fn: |element: Element|: E): Iterable[E]

	##[
		Returns a new iterable containing only elements matching the given predicate.

		Never returns if the iterable is infinite.
	]##
	sig filter(fn: |element: Element|: bool): self

	##[
		Returns the number of elements matching the given predicate.

		Never returns if the iterable is infinite.
	]##
	sig count(fn: |element: Element|: bool): Int

	##[
		Returns a new iterable containing only elements not matching the given predicate.

		Never returns if the iterable is infinite.
	]##
	sig reject(fn: |element: Element|: bool): self

	##[
		Checks whether any element of this iterable satisfies the given predicate.

		May never return if the iterable is infinite.
	]##
	sig any(fn: |element: Element|: bool): bool

	##[
		Checks whether every element of this iterable satisfies the given predicate.
		Never returns if the iterable is infinite.
	]##
	sig every(fn: |element: Element|: bool): bool

	##[
		Returns the first element matching the given predicate.
		Returns `nil` otherwise.

		May never return if the iterable is infinite.
	]##
	sig find(fn: |element: Element|: bool): Element?

	##[
		Returns the first element matching the given predicate.
		Throws an error otherwise.

		May never return if the iterable is infinite.
	]##
	sig find_err(fn: |element: Element|: bool): Element ! NotFoundError

	##[
		Returns the first index of element, or -1 if it could not be found.

		May never return if the iterable is infinite.
	]##
	sig index_of[E = Element](element: E): Int

	##[
		Returns a new iterable containing all elements except first `n` elements.

		Never returns if the iterable is infinite.
	]##
	sig drop(n: Int): self

	##[
		Returns a new iterable containing all elements except first elements that satisfy the given predicate.

		Never returns if the iterable is infinite.
	]##
	sig drop_while(fn: |element: Element|: bool): self

	##[
		Returns a new iterable containing only the first `n` elements.
	]##
	sig take(n: Int): self

	##[
		Returns a new iterable containing first elements satisfying the given predicate.

		May never return if the iterable is infinite.
	]##
	sig take_while(fn: |element: Element|: bool): self

	##[
		Reduces the elements of this iterable to a single value by
		iteratively combining them using the provided function.

		Never returns if the iterable is infinite.
	]##
	sig reduce[A](fn: |accum: A, element: Element|: A): A

	##[
		Reduces the elements of this iterable to a single value by
		iteratively combining each element with an initial value using the provided function.

		Never returns if the iterable is infinite.
	]##
	sig fold[I](initial: I, fn: |accum: I, element: Element|: I): I

	##[
		Creates a new list that contains the elements of this iterable.

		Never returns if the iterable is infinite.
	]##
	sig to_list[T > Element]: List[T]

	##[
		Creates a new tuple that contains the elements of this iterable.

		Never returns if the iterable is infinite.
	]##
	sig to_tuple: Tuple[Element]

	##[
		Creates a new immutable collection that contains the elements of this iterable.

		Never returns if the iterable is infinite.
	]##
	sig to_immutable_collection: ImmutableCollection[Element]

	##[
		Creates a new collection that contains the elements of this iterable.

		Never returns if the iterable is infinite.
	]##
	sig to_collection[T > Element]: Collection[T]

	sig ==(other: any): bool
	sig =~(other: any): bool

	##[
		Provides default implementations of most iterable methods
		for finite iterables.
	]##
	abstract mixin FiniteBase[+Element]
		implement Iterable[Element]

		def contains[E > Element](value: E): bool; end
		def is_empty: bool; end
		def first: Element; end
		def try_first: Element?; end
		def first_err: Element ! NotFoundError; end
		def last: Element; end
		def try_last: Element?; end
		def last_err: Element ! NotFoundError; end
		def map[E](fn: |element: Element|: E): Iterable[E]; end
		def filter(fn: |element: Element|: bool): self; end
		def count(fn: |element: Element|: bool): Int; end
		def reject(fn: |element: Element|: bool): self; end
		def any(fn: |element: Element|: bool): bool; end
		def every(fn: |element: Element|: bool): bool; end
		def find(fn: |element: Element|: bool): Element?; end
		def find_err(fn: |element: Element|: bool): Element ! NotFoundError; end
		def index_of[E = Element](element: E): Int; end
		def drop(n: Int): self; end
		def drop_while(fn: |element: Element|: bool): self; end
		def take(n: Int): self; end
		def take_while(fn: |element: Element|: bool): self; end
		def reduce[A](fn: |accum: A, element: Element|: A): A; end
		def fold[I](initial: I, fn: |accum: I, element: Element|: I): I; end
		def to_list[T > Element]: List[T]; end
		def to_tuple: Tuple[Element]; end
		def to_immutable_collection: ImmutableCollection[Element]; end
		def to_collection[T > Element]: Collection[T]; end
	end

	##[
		Provides default implementations of most iterable methods.
	]##
	abstract mixin Base[+Element]
		include FiniteBase[Element]

		def length: Int; end
	end
end