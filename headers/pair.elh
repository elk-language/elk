##[
	A `Pair` represents a 2-element tuple,
	or a key-value pair.
]##
sealed primitive class ::Std::Pair[Key, Value] < ::Std::Value
	include Tuple[Key | Value]

	##[
		Instantiate the `Pair` with the given key and value.
	]##
	init(key: Key, value: Value); end

	##[
		Returns the key, the first element of the tuple.
	]##
	def key: Key; end

	##[
		Returns the value, the second element of the tuple.
	]##
	def value: Value; end

	##[
		Always returns `2`.
		For compatibility with `Tuple`.
	]##
	def length: Int; end

	##[
		Get the element with the given index.
		The key is `0`, value is `1`.
	]##
	def [](index: AnyInt): Key | Value; end

	##[
		Check whether the given value
		is a `Pair` that is equal to this `Pair`.
	]##
	def ==(other: any): Bool; end

	##[
		Returns an iterator that iterates
		over each element of the pair.
	]##
	def iter: Iterator[Key, Value]; end

	sealed primitive class Iterator[+Key, +Value]
		include ::Std::Iterator::Base[Key | Value]

		##[
			Get the next element of the pair.
			Throws `:stop_iteration` when there are no more elements.
		]##
		def next: Key | Value ! :stop_iteration; end
	end
end
