##[
	Represents an ordered, mutable collection
	of elements indexed by integers starting at `0`.
]##
abstract mixin ::Std::List[Val]
	include Tuple[Val]
	include Collection::Base[Val]

	##[
		Set the element under the given index to the given value.

		Throws an unchecked error if the index is a negative number
		or is greater or equal to `length`.
	]##
	sig []=(index: AnyInt, value: Val)

	# Base methods

	##[
		Create a new `List` containing the elements of `self`
		and another given `Tuple`.
	]##
	sealed def +[V](other: Tuple[V]): List[Val | V]; end

	##[
		Iterates over the elements of this collection,
		yielding them to the given closure.

		Mutates the collection in place replacing the elements with the ones
		returned by the given closure.
	]##
	def map_mut[E](fn: |element: Val|: Val ! E): self ! E; end

	##[
		Iterates over the elements of this list,
		yielding them to the given closure.

		Returns a new list that consists of the elements returned
		by the given closure.
	]##
	def map[V, E](fn: |element: Val|: V ! E): List[V] ! E; end
end
