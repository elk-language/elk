##[
	Represents a multi-precision floating point number (a fraction like `1.2`, `0.1`).

	```
	sign × mantissa × 2**exponent
	```

	with 0.5 <= mantissa < 1.0, and MinExp <= exponent <= MaxExp.
	A `BigFloat` may also be zero (+0, -0) or infinite (+Inf, -Inf).
	All BigFloats are ordered.

	By setting the desired precision to 24 or 53,
	`BigFloat` operations produce the same results as the corresponding float32 or float64 IEEE-754 arithmetic for operands that
	correspond to normal (i.e., not denormal) `Float`, `Float32` and `Float64` numbers.
	Exponent underflow and overflow lead to a `0` or an Infinity for different values than IEEE-754 because `BigFloat` exponents have a much larger range.
]##
sealed primitive class ::Std::BigFloat < Value
	implement Hashable
	implement Comparable[self]

	##[
		Sets the precision to the given integer.
	]##
	def set_precision(precision: AnyInt): BigFloat; end
	alias p set_precision

	##[
		returns the mantissa precision of `self` in bits.
	]##
	def precision: UInt64; end

	##[
		Returns itself.

		```
			var a = 1.2bf
			+a #=> 1.2bf
		```
	]##
	sealed def +@: BigFloat; end

	##[
		Returns the result of negating the number.

		```
			var a = 1.2bf
			-a #=> -1.2bf
		```
	]##
	sealed def -@: BigFloat; end

	##[
		Add `other` to this bigfloat.
	]##
	sealed def +(other: CoercibleNumeric): BigFloat; end

	##[
		Subtract `other` from this bigfloat.
	]##
	sealed def -(other: CoercibleNumeric): BigFloat; end

	##[
		Multiply this float by `other`.
	]##
	sealed def *(other: CoercibleNumeric): BigFloat; end

	##[
		Divide this float by another float.
	]##
	sealed def /(other: CoercibleNumeric): BigFloat; end

	##[
		Exponentiate this float, raise it to the power of `other`.
	]##
	sealed def **(other: CoercibleNumeric): BigFloat; end

	##[
		Compare this float with another float.
		Returns `1` if it is greater, `0` if they're equal, `-1` if it's less than the other.
	]##
	sealed def <=>(other: CoercibleNumeric): Int; end

	sealed def >=(other: CoercibleNumeric): Bool; end

	sealed def >(other: CoercibleNumeric): Bool; end

	sealed def <=(other: CoercibleNumeric): Bool; end

	sealed def <(other: CoercibleNumeric): Bool; end

	sealed def ==(other: any): Bool; end

	##[
		Returns the remainder of dividing by `other`.

		```
			var a = 10bf
			var b = 3bf
			a % b #=> 1bf
		```
	]##
	sealed def %(other: CoercibleNumeric): BigFloat; end

	##[
		Returns itself.
	]##
	def to_bigfloat: BigFloat; end

	##[
		Converts to a fixed-precision floating point number.
	]##
	def to_float: Float; end

	##[
		Converts the bigfloat to an automatically resized integer.
	]##
	def to_int: Int; end

	##[
		Converts the bigfloat to a 64-bit floating point number.
	]##
	def to_float64: Float64; end

	##[
		Converts the bigfloat to a 32-bit floating point number.
	]##
	def to_float32: Float32; end

	##[
		Converts the bigfloat to a 64-bit integer.
	]##
	def to_int64: Int64; end

	##[
		Converts the bigfloat to a 32-bit integer.
	]##
	def to_int32: Int32; end

	##[
		Converts the bigfloat to a 16-bit integer.
	]##
	def to_int16: Int16; end

	##[
		Converts the bigfloat to a 8-bit integer.
	]##
	def to_int8: Int8; end

	##[
		Converts the bigfloat to an unsigned 64-bit integer.
	]##
	def to_uint64: UInt64; end

	##[
		Converts the bigfloat to an unsigned 32-bit integer.
	]##
	def to_uint32: UInt32; end

	##[
		Converts the bigfloat to an unsigned 16-bit integer.
	]##
	def to_uint16: UInt16; end

	##[
		Converts the bigfloat to an unsigned 8-bit integer.
	]##
	def to_uint8: UInt8; end

	##[
		Calculates a hash of the float.
	]##
	def hash: UInt64; end
end
