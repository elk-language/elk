sealed primitive class ::Std::String < Value
	##[
		Concatenate this `String`
		with another `String` or `Char`.

		Creates a new `String` containing the content
		of both operands.
	]##
	sealed def +(other: String | Char): String; end
	alias concat +

	##[
		Remove the given suffix from the `String`.

		Does nothing if the `String` doesn't end
		with `suffix` and returns `self`.

		If the `String` ends with the given suffix
		a new `String` gets created and returned that doesn't contain
		the suffix.
	]##
	sealed def -(suffix: String | Char): String; end
	alias remove_suffix -

	##[
		Creates a new `String` that contains the
		content of `self` repeated `n` times.
	]##
	sealed def *(n: Int): String; end
	alias repeat *

	sealed def <=>(other: String | Char): Int; end

	sealed def <=(other: String | Char): Bool; end

	sealed def <(other: String | Char): Bool; end

	sealed def >=(other: String | Char): Bool; end

	sealed def >(other: String | Char): Bool; end

	sealed def ==(other: Object): Bool; end

	##[
		Get the Unicode code point with the given index.
		Indices start at 0.
	]##
	def chat_at(index: AnyInt): Char; end

	##[
		Get the byte with the given index.
		Indices start at 0.
	]##
	def byte_at(index: AnyInt): UInt8; end

	##[
		Get the Unicode grapheme cluster with the given index.
		Indices start at 0.
	]##
	def grapheme_at(index: AnyInt): String; end

	##[
		Create a new string with all of the characters
		of this one turned into uppercase.
	]##
	def uppercase: String; end

	##[
		Create a new string with all of the characters
		of this one turned into lowercase.
	]##
	def lowercase: String; end

	##[
		Get the number of Unicode code points
		that this `String` contains.
	]##
	def length: Int; end
	alias char_count length

	##[
		Get the number of bytes that this
		string contains.
	]##
	def byte_count: Int; end

	##[
		Get the number of unicode grapheme clusters
		present in this string.
	]##
	def grapheme_count: Int; end

	##[
		Convert the `String` to a `Symbol`.
	]##
	def to_symbol: Symbol; end

	##[
		Returns itself.
	]##
	def to_string: String; end

	##[
		Check whether the `String` is empty.
	]##
	def is_empty: Bool; end

	##[
		Iterates over all unicode code points of a `String`.
	]##
	def iterator: CharIterator; end
	alias char_iterator iterator

	##[
		Iterates over all bytes of a `String`.
	]##
	def byte_iterator: ByteIterator; end

	##[
		Iterates over all unicode code points of a `String`.
	]##
	sealed primitive class CharIterator
		##[
			Get the next character.
			Throws `:stop_iteration` when no more characters are available.
		]##
		def next: Char ! :stop_iteration; end

		##[
			Returns itself.
		]##
		def iterator: CharIterator; end
	end

	##[
		Iterates over all bytes of a `String`.
	]##
	sealed primitive class ByteIterator
		##[
			Get the next byte.
			Throws `:stop_iteration` when no more bytes are available.
		]##
		def next: UInt8 ! :stop_iteration; end

		##[
			Returns itself.
		]##
		def iterator: ByteIterator; end
	end
end
