##[
	A dynamically resizable map data structure backed
	by an array with a hashing algorithm.

	It is an unordered collection of key-value pairs.
]##
sealed primitive class ::Std::HashMap[Key, Value] < ::Std::Value
	include Map[Key, Value]

	##[
		Mutates the map.

		Reallocates the underlying array to hold
		the given number of new elements.

		Expands the `capacity` of the list by `new_slots`
	]##
	def grow(new_slots: Int): self; end

	##[
		Returns the number of key-value pairs that can be
		held by the underlying array.

		This value will change when the map gets resized,
		and the underlying array gets reallocated.
	]##
	def capacity: Int; end

	##[
		Returns the number of key-value pairs present in the map.
	]##
	def length: Int; end

	##[
		Returns the number of left slots for new key-value pairs
		in the underlying array.
		It tells you how many more elements can be
		added to the map before the underlying array gets
		reallocated.

		It is always equal to `capacity - length`.
	]##
	def left_capacity: Int; end

	##[
		Get the element under the given key.
		Returns `nil` when the key is not present.
	]##
	def [](key: Key): Value?; end

	##[
		Set the element under the given index to the given value.
	]##
	def []=(key: Key, value: Value); end

	##[
		Create a new `HashMap` containing the pairs of `self`
		and another given record/map.
	]##
	sealed def +[K, V](other: Record[K, V]): HashMap[Key | K, Value | V]; end

	##[
		Check whether the given `pair` is present in this map.
	]##
	def contains[V := Pair[Key, Value]](value: V): bool; end

	##[
		Check whether the given `key` is present in this map.
	]##
	def contains_key(key: Key): bool; end

	##[
		Check whether the given `value` is present in this map.
	]##
	def contains_value(value: Value): bool; end

	##[
		Check whether the given value is a `HashMap`
		with the same elements.
	]##
	sealed def ==(other: any): bool; end

	##[
		Check whether the given value is an `HashMap` or `HashRecord`
		with the same elements.
	]##
	sealed def =~(other: any): bool; end

	##[
		Iterates over the key value pairs of this map,
		yielding them to the given closure.

		Returns a new ArrayList that consists of the values returned
		by the given closure.
	]##
	def map[V, E](fn: |element: Pair[Key, Value]|: V ! E): ArrayList[V] ! E; end

	##[
		Iterates over the key value pairs of this map,
		yielding them to the given closure.

		Returns a new HashMap that consists of the key value pairs returned
		by the given closure.
	]##
	def map_pairs[K, V, E](fn: |pair: Pair[Key, Value]|: Pair[K, V] ! E): HashMap[K, V] ! E; end

	##[
		Iterates over the values of this map,
		yielding them to the given closure.

		Returns a new HashMap that consists of the values returned
		by the given closure.
	]##
	def map_values[V, E](fn: |value: Value|: V ! E): HashMap[Key, V] ! E; end

	##[
		Iterates over the values of this map,
		yielding them to the given closure.

		Mutates the map in place replacing the values with the ones
		returned by the given closure.
	]##
	def map_values_mut[E](fn: |value: Value|: Value ! E): self ! E; end

	##[
		Returns an iterator that iterates
		over each element of the map.
	]##
	def iter: Iterator[Key, Value]; end

	sealed primitive class Iterator[Key, Value]
		include ::Std::Iterator::Base[Pair[Key, Value]]

		init(map: HashMap[Key, Value]); end

		##[
			Get the next pair of the map.
			Throws `:stop_iteration` when there are no more elements.
		]##
		def next: Pair[Key, Value] ! :stop_iteration; end

		##[
			Resets the state of the iterator.
		]##
		def reset; end
	end
end
