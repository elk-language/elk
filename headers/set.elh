##[
	Represents an unordered, mutable collection
	of unique elements.
]##
abstract mixin ::Std::Set[Val]
	include ImmutableSet[Val]
	include Collection::Base[Val]

	##[
		Adds the given value to the set.

		Returns `false` if the value is already present in the set.
		Otherwise returns `true`.
	]##
	sig push(value: Val): bool

	# Base methods

	##[
		Return the union of both sets.

		Create a new set containing all the elements
		present in `self` and `other`.
	]##
	def +[V](other: ImmutableSet[V]): Set[Val | V]; end
	alias | +

	##[
		Return the intersection of both sets.

		Create a new set containing only the elements
		present both in `self` and `other`.
	]##
	def &[V](other: ImmutableSet[V]): Set[Val & V]; end

	##[
		Check whether the given `value` is present in this set.
	]##
	sig contains[V := Val](value: V): bool

	##[
		Adds the given values to the set.

		Skips a value if it is already present in the set.
	]##
	def append(*values: Val): self; end

	##[
		Adds the given value to the set.

		Does nothing if the value is already present in the set.
	]##
	def <<(value: Val): self; end

	##[
		Iterates over the elements of this set,
		yielding them to the given closure.

		Returns a new Set that consists of the elements returned
		by the given closure.
	]##
	def map[V, E](fn: |element: Val|: V ! E): Set[V] ! E; end
end
