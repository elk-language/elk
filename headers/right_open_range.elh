##[
	Represents a right-open range from `start` to `end` *[start, end)*
]##
sealed primitive class ::Std::RightOpenRange[Element < Comparable[Element]] < Value
	include Range[Element]

	def is_left_closed: true; end
	def is_right_closed: false; end

	##[
		Check whether the given `value` is present in this range.
	]##
	def contains[E := Element](value: E): bool; end

	##[
		Returns the lower bound of the range.
	]##
	def start: Element; end

	##[
		Returns the upper bound of the range.
	]##
	def end: Element; end

	extend where Element < Incrementable[Element] & Comparable[Element]
		##[
			Returns the iterator for this range.
			Only ranges of incrementable values can be iterated over.
		]##
		def iter: Iterator[Element]; end
	end

	sealed primitive class Iterator[Element < Incrementable[Element] & Comparable[Element]]
		include ::Std::Iterator::Base[Element]

		init(range: RightOpenRange[Element]); end

		##[
			Get the next element of the list.
			Throws `:stop_iteration` when there are no more elements.
		]##
		def next: Element ! :stop_iteration; end
	end
end
