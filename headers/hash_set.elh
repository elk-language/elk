##[
	A dynamically resizable set data structure backed
	by an array with a hashing algorithm.

	It is an unordered collection of unique values.
]##
sealed primitive class ::Std::HashSet[Val] < Value
	include Set[Val]

	##[
		Removes the element from the set.

		Returns `true` if the element has been removed,
		otherwise returns `false.
	]##
	def remove(value: Val): bool; end

	##[
		Removes all elements from the set.
	]##
	def clear; end

	##[
		Mutates the set.

		Reallocates the underlying array to hold
		the given number of new elements.

		Expands the `capacity` of the list by `new_slots`
	]##
	def grow(new_slots: Int): self; end

	##[
		Returns the number of elements that can be
		held by the underlying array.

		This value will change when the set gets resized,
		and the underlying array gets reallocated.
	]##
	def capacity: Int; end

	##[
		Returns the number of elements present in the set.
	]##
	def length: Int; end

	##[
		Returns the number of left slots for new elements
		in the underlying array.
		It tells you how many more elements can be
		added to the set before the underlying array gets
		reallocated.

		It is always equal to `capacity - length`.
	]##
	def left_capacity: Int; end

	##[
		Return the union of both sets.

		Create a new `HashSet` containing all the elements
		present in `self` and `other`.
	]##
	sealed def +[V](other: ImmutableSet[V]): HashSet[Val | V]; end
	alias | +

	##[
		Return the intersection of both sets.
		Create a new `HashSet` containing only the elements
		present both in `self` and `other`.
	]##
	sealed def &[V](other: ImmutableSet[V]): HashSet[Val & V]; end

	##[
		Check whether the given `value` is present in this set.
	]##
	def contains[V := Val](value: V): bool; end

	##[
		Check whether the given value is a `HashSet`
		with the same elements.
	]##
	sealed def ==(other: any): bool; end
	alias =~ ==

	##[
		Adds the given values to the set.

		Skips a value if it is already present in the set.

		Reallocates the underlying array if it is
		too small to hold them.
	]##
	def append(*values: Val): self; end

	##[
		Adds the given value to the set.

		Does nothing if the value is already present in the set.

		Reallocates the underlying array if it is
		too small to hold it.
	]##
	def <<(value: Val): self; end

	##[
		Adds the given value to the set.

		Returns `false` if the value is already present in the set.
		Otherwise returns `true`.

		Reallocates the underlying array if it is
		too small to hold it.
	]##
	def push(value: Val): bool; end

	##[
		Iterates over the elements of this set,
		yielding them to the given closure.

		Returns a new HashSet that consists of the elements returned
		by the given closure.
	]##
	def map[V, E](fn: |element: Val|: V ! E): HashSet[V] ! E; end

	##[
		Returns an iterator that iterates
		over each element of the set.
	]##
	def iter: Iterator[Val]; end

	sealed primitive class Iterator[Val]
		include ::Std::Iterator::Base[Val]

		##[
			Get the next element of the set.
			Throws `:stop_iteration` when there are no more elements.
		]##
		def next: Val ! :stop_iteration; end
	end
end
