##[
	A dynamically resizable set data structure backed
	by an array with a hashing algorithm.

	It is an unordered collection of unique values.
]##
sealed primitive class ::Std::HashSet < Value
	typedef Element = any

	##[
		Mutates the set.

		Reallocates the underlying array to hold
		the given number of new elements.

		Expands the `capacity` of the list by `new_slots`
	]##
	def grow(new_slots: Int): HashSet; end

	##[
		Returns the number of elements that can be
		held by the underlying array.

		This value will change when the set gets resized,
		and the underlying array gets reallocated.
	]##
	def capacity: Int; end

	##[
		Returns the number of elements present in the set.
	]##
	def length: Int; end

	##[
		Returns the number of left slots for new elements
		in the underlying array.
		It tells you how many more elements can be
		added to the set before the underlying array gets
		reallocated.

		It is always equal to `capacity - length`.
	]##
	def left_capacity: Int; end

	##[
		Get the element under the given index.

		Throws an unchecked error if the index is a negative number
		or is greater or equal to `length`.
	]##
	def [](index: AnyInt): Element; end

	##[
		Set the element under the given index to the given value.

		Throws an unchecked error if the index is a negative number
		or is greater or equal to `length`.
	]##
	def []=(index: AnyInt, value: Element); end

	##[
		Return the union of both sets.

		Create a new `HashSet` containing all the elements
		present in `self` and `other`.
	]##
	sealed def +(other: HashSet): HashSet; end
	alias | +, union +

	##[
		Return the intersection of both sets.

		Create a new `HashSet` containing only the elements
		present both in `self` and `other`.
	]##
	sealed def &(other: HashSet): HashSet; end

	##[
		Check whether the given `value` is present in this set.
	]##
	def contains(value: Element): Bool; end

	##[
		Check whether the given value is a `HashSet`
		with the same elements.
	]##
	sealed def ==(other: any): Bool; end
	alias =~ ==

	##[
		Adds the given values to the set.

		Skips a value if it is already present in the set.

		Reallocates the underlying array if it is
		too small to hold them.
	]##
	def append(*values: Element): HashSet; end

	##[
		Adds the given value to the set.

		Does nothing if the value is already present in the set.

		Reallocates the underlying array if it is
		too small to hold it.
	]##
	def <<(value: Element): HashSet; end

	# TODO
	def map; end

	##[
		Returns an iterator that iterates
		over each element of the set.
	]##
	def iterator: Iterator; end

	sealed primitive class Iterator
		typedef Element = any

		##[
			Get the next element of the set.
			Throws `:stop_iteration` when there are no more elements.
		]##
		def next: Element ! :stop_iteration; end

		##[
			Returns `self`.
		]##
		def iterator: Iterator; end
	end
end
