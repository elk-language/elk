##[
	Represents an unordered immutable collection of key-value pairs.
	A record is an immutable map.
]##
abstract mixin ::Std::Record[Key, Value]
	include Iterable::Base[Pair[Key, Value]]

	##[
		Get the element under the given key.
		Returns `nil` when the key is not present.
	]##
	sig [](key: Key): Value?

	##[
		Create a new record containing the pairs of `self`
		and another given record.
	]##
	sealed def +[K, V](other: Record[K, V]): Record[Key | K, Value | V]; end

	##[
		Check whether the given `pair` is present in this record.
	]##
	def contains[E = Pair[Key, Value]](value: E): bool; end

	##[
		Check whether the given `key` is present in this record.
	]##
	def contains_key(key: Key): bool; end

	##[
		Check whether the given `value` is present in this record.
	]##
	def contains_value(value: Value): bool; end

	##[
		Check whether the given value is the same type of record
		with the same elements.
	]##
	sealed def ==(other: any): bool; end

	##[
		Check whether the given value is a record
		with the same elements.
	]##
	sealed def =~(other: any): bool; end

	##[
		Iterates over the key value pairs of this record,
		yielding them to the given closure.

		Returns a new list that consists of the values returned
		by the given closure.
	]##
	def map[E](fn: |element: Pair[Key, Value]|: E): List[E]; end

	##[
		Iterates over the key value pairs of this record,
		yielding them to the given closure.

		Returns a new record that consists of the key value pairs returned
		by the given closure.
	]##
	def map_pairs[K, V](fn: |pair: Pair[Key, Value]|: Pair[K, V]): Record[K, V]; end

	##[
		Iterates over the values of this record,
		yielding them to the given closure.

		Returns a new record that consists of the values returned
		by the given closure.
	]##
	def map_values[V](fn: |value: Value|: V): Record[Key, V]; end
end
