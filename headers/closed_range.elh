##[
	Represents a closed range from `start` to `end` *[start, end]*
]##
sealed primitive class ::Std::ClosedRange[Val < Comparable[Val]] < Value
	include Range[Val]

	def is_left_closed: true; end
	def is_right_closed: true; end

	##[
		Check whether the given `value` is present in this range.
	]##
	def contains[V := Val](value: V): bool; end

	##[
		Returns the lower bound of the range.
	]##
	def start: Val; end

	##[
		Returns the upper bound of the range.
	]##
	def end: Val; end

	extend where Val < Incrementable[Val] & Comparable[Val]
		##[
			Returns the iterator for this range.
			Only ranges of incrementable values can be iterated over.
		]##
		def iter: Iterator[Val]; end
	end

	sealed primitive class Iterator[Val < Incrementable[Val] & Comparable[Val]]
		include ::Std::ResettableIterator::Base[Val]

		init(range: ClosedRange[Val]); end

		##[
			Get the next element of the list.
			Throws `:stop_iteration` when there are no more elements.
		]##
		def next: Val ! :stop_iteration; end

		##[
			Resets the state of the iterator.
		]##
		def reset; end
	end
end
