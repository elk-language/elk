##[
	An interface that represents a finite, mutable collection
	of elements.
]##
interface ::Std::Collection[Val]
	implement ImmutableCollection[Val]

	##[
		Returns the number of elements present in the collection.
	]##
	sig length: Int

	##[
		Adds the given value to the collection.
	]##
	sig push(value: Val)

	##[
		Removes the element from the collection.

		Returns `true` if the element has been removed,
		otherwise returns `false.
	]##
	sig remove(value: Val): bool

	##[
		Removes all elements from the collection.
	]##
	sig clear

	# Base methods

	##[
		Removes all given elements from the collection.

		Returns `true` if any elements have been removed,
		otherwise returns `false.
	]##
	sig remove_all(*values: Val): bool

	##[
		Iterates over the elements of this collection,
		yielding them to the given closure.

		Returns a new collection that consists of the elements returned
		by the given closure.
	]##
	sig map[V, E](fn: |element: Val|: V ! E): Collection[V] ! E

	##[
		Adds the given values to the collection.
	]##
	sig append(*values: Val): self

	##[
		Adds the given value to the collection.
	]##
	sig <<(value: Val): self

	##[
		Provides default implementations of most collection methods.
	]##
	abstract mixin Base[Val]
		implement Collection[Val]
		include ImmutableCollection::Base[Val]

		def remove_all(*values: Val): bool; end
		def map[V, E](fn: |element: Val|: V ! E): Collection[V] ! E; end
		def append(*values: Val): self; end
		def <<(value: Val): self; end
	end
end
