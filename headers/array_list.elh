##[
	A dynamically resizable list data structure backed
	by an array.

	It is an ordered collection of integer indexed values.
]##
sealed primitive class ::Std::ArrayList[Element] < Value
	include List::Base[Element]

	##[
		Removes the element from the list.

		Returns `true` if the element has been removed,
		otherwise returns `false.
	]##
	def remove(value: Element): bool; end

	##[
		Adds the given value to the list.
	]##
	def push(value: Element); end

	##[
		Removes all elements from the list.
	]##
	def clear; end

	##[
		Mutates the list.

		Reallocates the underlying array to hold
		the given number of new elements.

		Expands the `capacity` of the list by `new_slots`
	]##
	def grow(new_slots: Int): self; end

	##[
		Returns the number of elements that can be
		held by the underlying array.

		This value will change when the list gets resized,
		and the underlying array gets reallocated
	]##
	def capacity: Int; end

	##[
		Returns the number of elements present in the list.
	]##
	def length: Int; end

	##[
		Returns the number of left slots for new elements
		in the underlying array.
		It tells you how many more elements can be
		added to the list before the underlying array gets
		reallocated.

		It is always equal to `capacity - length`.
	]##
	def left_capacity: Int; end

	##[
		Get the element under the given index.

		Throws an unchecked error if the index is a negative number
		or is greater or equal to `length`.
	]##
	def [](index: AnyInt): Element; end

	##[
		Set the element under the given index to the given value.

		Throws an unchecked error if the index is a negative number
		or is greater or equal to `length`.
	]##
	def []=(index: AnyInt, value: Element); end

	##[
		Create a new `ArrayList` containing the elements of `self`
		and another given `ArrayList` or `ArrayTuple`.
	]##
	sealed def +[E](other: ArrayList[E] | ArrayTuple[E]): ArrayList[Element | E]; end

	##[
		Create a new `ArrayList` containing the elements of `self`
		repeated `n` times.
	]##
	sealed def *(n: Int): self; end

	##[
		Check whether the given `value` is present in this list.
	]##
	def contains[E > Element](value: E): bool; end

	##[
		Check whether the given value is an `ArrayList`
		with the same elements.
	]##
	sealed def ==(other: any): Bool; end

	##[
		Check whether the given value is an `ArrayList` or `ArrayTuple`
		with the same elements.
	]##
	sealed def =~(other: any): Bool; end

	##[
		Adds the given values to the list.

		Reallocates the underlying array if it is
		too small to hold them.
	]##
	def append(*values: Element): self; end

	##[
		Adds the given value to the list.

		Reallocates the underlying array if it is
		too small to hold it.
	]##
	def <<(value: Element): self; end

	##[
		Iterates over the elements of this list,
		yielding them to the given closure.

		Mutates the list in place replacing the elements with the ones
		returned by the given closure.
	]##
	def map_mut(fn: |element: Element|: Element): self; end

	##[
		Iterates over the elements of this list,
		yielding them to the given closure.

		Returns a new List that consists of the elements returned
		by the given closure.
	]##
	def map[E](fn: |element: Element|: E): ArrayList[E]; end

	##[
		Returns an iterator that iterates
		over each element of the list.
	]##
	def iter: Iterator[Element]; end

	sealed primitive class Iterator[Element]
		include ::Std::Iterator::Base[Element]

		##[
			Get the next element of the list.
			Throws `:stop_iteration` when there are no more elements.
		]##
		def next: Element ! :stop_iteration; end
	end
end
