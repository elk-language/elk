package lexer

import "testing"

func TestOperator(t *testing.T) {
	tests := testTable{
		"should be recognised": {
			input: ". .. ... - -= -> + += ^ ^= * *= ** **= = == === =~ => =:= =!= : := :: :> :>> ~ ~= ~> > >= >> >>= < <= << <<= <: <<: & &= && &&= | |= || ||= |> ? ?? ??= ! != !== % %=",
			want: []*Token{
				{
					TokenType:  DotToken,
					StartByte:  0,
					ByteLength: 1,
					Line:       1,
					Column:     1,
				},
				{
					TokenType:  RangeOpToken,
					StartByte:  2,
					ByteLength: 2,
					Line:       1,
					Column:     3,
				},
				{
					TokenType:  ExclusiveRangeOpToken,
					StartByte:  5,
					ByteLength: 3,
					Line:       1,
					Column:     6,
				},
				{
					TokenType:  MinusToken,
					StartByte:  9,
					ByteLength: 1,
					Line:       1,
					Column:     10,
				},
				{
					TokenType:  MinusEqualToken,
					StartByte:  11,
					ByteLength: 2,
					Line:       1,
					Column:     12,
				},
				{
					TokenType:  ThinArrowToken,
					StartByte:  14,
					ByteLength: 2,
					Line:       1,
					Column:     15,
				},
				{
					TokenType:  PlusToken,
					StartByte:  17,
					ByteLength: 1,
					Line:       1,
					Column:     18,
				},
				{
					TokenType:  PlusEqualToken,
					StartByte:  19,
					ByteLength: 2,
					Line:       1,
					Column:     20,
				},
				{
					TokenType:  XorToken,
					StartByte:  22,
					ByteLength: 1,
					Line:       1,
					Column:     23,
				},
				{
					TokenType:  XorEqualToken,
					StartByte:  24,
					ByteLength: 2,
					Line:       1,
					Column:     25,
				},
				{
					TokenType:  StarToken,
					StartByte:  27,
					ByteLength: 1,
					Line:       1,
					Column:     28,
				},
				{
					TokenType:  StarEqualToken,
					StartByte:  29,
					ByteLength: 2,
					Line:       1,
					Column:     30,
				},
				{
					TokenType:  PowerToken,
					StartByte:  32,
					ByteLength: 2,
					Line:       1,
					Column:     33,
				},
				{
					TokenType:  PowerEqualToken,
					StartByte:  35,
					ByteLength: 3,
					Line:       1,
					Column:     36,
				},
				{
					TokenType:  AssignToken,
					StartByte:  39,
					ByteLength: 1,
					Line:       1,
					Column:     40,
				},
				{
					TokenType:  EqualToken,
					StartByte:  41,
					ByteLength: 2,
					Line:       1,
					Column:     42,
				},
				{
					TokenType:  StrictEqualToken,
					StartByte:  44,
					ByteLength: 3,
					Line:       1,
					Column:     45,
				},
				{
					TokenType:  MatchOpToken,
					StartByte:  48,
					ByteLength: 2,
					Line:       1,
					Column:     49,
				},
				{
					TokenType:  ThickArrowToken,
					StartByte:  51,
					ByteLength: 2,
					Line:       1,
					Column:     52,
				},
				{
					TokenType:  RefEqualToken,
					StartByte:  54,
					ByteLength: 3,
					Line:       1,
					Column:     55,
				},
				{
					TokenType:  RefNotEqualToken,
					StartByte:  58,
					ByteLength: 3,
					Line:       1,
					Column:     59,
				},
				{
					TokenType:  ColonToken,
					StartByte:  62,
					ByteLength: 1,
					Line:       1,
					Column:     63,
				},
				{
					TokenType:  ColonEqualToken,
					StartByte:  64,
					ByteLength: 2,
					Line:       1,
					Column:     65,
				},
				{
					TokenType:  ScopeResOpToken,
					StartByte:  67,
					ByteLength: 2,
					Line:       1,
					Column:     68,
				},
				{
					TokenType:  ReverseSubtypeToken,
					StartByte:  70,
					ByteLength: 2,
					Line:       1,
					Column:     71,
				},
				{
					TokenType:  ReverseInstanceOfToken,
					StartByte:  73,
					ByteLength: 3,
					Line:       1,
					Column:     74,
				},
				{
					TokenType:  TildeToken,
					StartByte:  77,
					ByteLength: 1,
					Line:       1,
					Column:     78,
				},
				{
					TokenType:  TildeEqualToken,
					StartByte:  79,
					ByteLength: 2,
					Line:       1,
					Column:     80,
				},
				{
					TokenType:  WigglyArrowToken,
					StartByte:  82,
					ByteLength: 2,
					Line:       1,
					Column:     83,
				},
				{
					TokenType:  GreaterToken,
					StartByte:  85,
					ByteLength: 1,
					Line:       1,
					Column:     86,
				},
				{
					TokenType:  GreaterEqualToken,
					StartByte:  87,
					ByteLength: 2,
					Line:       1,
					Column:     88,
				},
				{
					TokenType:  RBitShiftToken,
					StartByte:  90,
					ByteLength: 2,
					Line:       1,
					Column:     91,
				},
				{
					TokenType:  RBitShiftEqualToken,
					StartByte:  93,
					ByteLength: 3,
					Line:       1,
					Column:     94,
				},
				{
					TokenType:  LessToken,
					StartByte:  97,
					ByteLength: 1,
					Line:       1,
					Column:     98,
				},
				{
					TokenType:  LessEqualToken,
					StartByte:  99,
					ByteLength: 2,
					Line:       1,
					Column:     100,
				},
				{
					TokenType:  LBitShiftToken,
					StartByte:  102,
					ByteLength: 2,
					Line:       1,
					Column:     103,
				},
				{
					TokenType:  LBitShiftEqualToken,
					StartByte:  105,
					ByteLength: 3,
					Line:       1,
					Column:     106,
				},
				{
					TokenType:  SubtypeToken,
					StartByte:  109,
					ByteLength: 2,
					Line:       1,
					Column:     110,
				},
				{
					TokenType:  InstanceOfToken,
					StartByte:  112,
					ByteLength: 3,
					Line:       1,
					Column:     113,
				},
				{
					TokenType:  AndToken,
					StartByte:  116,
					ByteLength: 1,
					Line:       1,
					Column:     117,
				},
				{
					TokenType:  AndEqualToken,
					StartByte:  118,
					ByteLength: 2,
					Line:       1,
					Column:     119,
				},
				{
					TokenType:  AndAndToken,
					StartByte:  121,
					ByteLength: 2,
					Line:       1,
					Column:     122,
				},
				{
					TokenType:  AndAndEqualToken,
					StartByte:  124,
					ByteLength: 3,
					Line:       1,
					Column:     125,
				},
				{
					TokenType:  OrToken,
					StartByte:  128,
					ByteLength: 1,
					Line:       1,
					Column:     129,
				},
				{
					TokenType:  OrEqualToken,
					StartByte:  130,
					ByteLength: 2,
					Line:       1,
					Column:     131,
				},
				{
					TokenType:  OrOrToken,
					StartByte:  133,
					ByteLength: 2,
					Line:       1,
					Column:     134,
				},
				{
					TokenType:  OrOrEqualToken,
					StartByte:  136,
					ByteLength: 3,
					Line:       1,
					Column:     137,
				},
				{
					TokenType:  PipeOpToken,
					StartByte:  140,
					ByteLength: 2,
					Line:       1,
					Column:     141,
				},
				{
					TokenType:  QuestionMarkToken,
					StartByte:  143,
					ByteLength: 1,
					Line:       1,
					Column:     144,
				},
				{
					TokenType:  NilCoalesceToken,
					StartByte:  145,
					ByteLength: 2,
					Line:       1,
					Column:     146,
				},
				{
					TokenType:  NilCoalesceEqualToken,
					StartByte:  148,
					ByteLength: 3,
					Line:       1,
					Column:     149,
				},
				{
					TokenType:  BangToken,
					StartByte:  152,
					ByteLength: 1,
					Line:       1,
					Column:     153,
				},
				{
					TokenType:  NotEqualToken,
					StartByte:  154,
					ByteLength: 2,
					Line:       1,
					Column:     155,
				},
				{
					TokenType:  StrictNotEqualToken,
					StartByte:  157,
					ByteLength: 3,
					Line:       1,
					Column:     158,
				},
				{
					TokenType:  PercentToken,
					StartByte:  161,
					ByteLength: 1,
					Line:       1,
					Column:     162,
				},
				{
					TokenType:  PercentEqualToken,
					StartByte:  163,
					ByteLength: 2,
					Line:       1,
					Column:     164,
				},
			},
		},
	}

	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			tokenTest(tc, t)
		})
	}
}
