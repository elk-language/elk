using Std::Test::Assertions::*
using Std::Test::*

describe "Date::Span", ->
	context "init", ->
		should "create a zero value", ->
			s := Date::Span()
			assert! s <: Date::Span
			assert! s.years == 0
			assert! s.months == 0
			assert! s.days == 0
		end

		should "create with all positional args", ->
			s := Date::Span(10, 5, 2)
			assert! s <: Date::Span
			assert! s.years == 10
			assert! s.months == 5
			assert! s.days == 2
		end

		should "create with a few positional args", ->
			s := Date::Span(10, 5)
			assert! s <: Date::Span
			assert! s.years == 10
			assert! s.months == 5
			assert! s.days == 0
		end


		should "create with named args", ->
			s := Date::Span(months: 10, years: 5)
			assert! s <: Date::Span
			assert! s.years == 5
			assert! s.months == 10
			assert! s.days == 0
		end
	end

	context "unary minus", ->
		should "negate positive span", ->
			s := Date::Span(10, 2, 9)
			r := -s
			assert! r <: Date::Span
			assert! r.years == -10
			assert! r.months == -2
			assert! r.days == -9
		end

		should "negate negative span", ->
			s := Date::Span(-10, -5, -2)
			r := -s
			assert! s <: Date::Span
			assert! r.years == 10
			assert! r.months == 5
			assert! r.days == 2
		end
	end

	context "unary plus", ->
		should "not change positive span", ->
			s := Date::Span(10, 2, 9)
			r := +s
			assert! r <: Date::Span
			assert! r.years == 10
			assert! r.months == 2
			assert! r.days == 9
		end

		should "not change negative span", ->
			s := Date::Span(-10, -5, -2)
			r := +s
			assert! s <: Date::Span
			assert! r.years == -10
			assert! r.months == -5
			assert! r.days == -2
		end
	end

	context "+", ->
		context "duration argument", ->
			should "add date span", ->
				s := Date::Span(10, 2, 9)
				var d: Duration = Date::Span(1, 2, 3)
				r := s + d
				assert! r <: Date::Span
				assert! r.years == 11
				assert! r.months == 4
				assert! r.days == 12
			end

			should "add time span", ->
				s := Date::Span(10, 2, 9)
				var d: Duration = Time::Span(1, 2, 3)
				r := s + d
				assert! r <: DateTime::Span
				assert! r.years == 10
				assert! r.months == 2
				assert! r.days == 9
				assert! r.hours == 1
				assert! r.minutes == 2
				assert! r.seconds == 3
			end

			should "add datetime span", ->
				s := Date::Span(10, 2, 9)
				var d: Duration = DateTime::Span(1, 2, 3, 4, 5, 6)
				r := s + d
				assert! r <: DateTime::Span
				assert! r.years == 11
				assert! r.months == 4
				assert! r.days == 12
				assert! r.hours == 4
				assert! r.minutes == 5
				assert! r.seconds == 6
			end
		end

		should "add date span", ->
			s := Date::Span(10, 2, 9)
			r := s + Date::Span(1, 2, 3)
			assert! r <: Date::Span
			assert! r.years == 11
			assert! r.months == 4
			assert! r.days == 12
		end

		should "add time span", ->
			s := Date::Span(10, 2, 9)
			r := s + Time::Span(1, 2, 3)
			assert! r <: DateTime::Span
			assert! r.years == 10
			assert! r.months == 2
			assert! r.days == 9
			assert! r.hours == 1
			assert! r.minutes == 2
			assert! r.seconds == 3
		end

		should "add datetime span", ->
			s := Date::Span(10, 2, 9)
			r := s + DateTime::Span(1, 2, 3, 4, 5, 6)
			assert! r <: DateTime::Span
			assert! r.years == 11
			assert! r.months == 4
			assert! r.days == 12
			assert! r.hours == 4
			assert! r.minutes == 5
			assert! r.seconds == 6
		end
	end

	context "-", ->
		context "duration argument", ->
			should "subtract date span", ->
				s := Date::Span(10, 2, 9)
				var d: Duration = Date::Span(1, 2, 3)
				r := s - d
				assert! r <: Date::Span
				assert! r.years == 9
				assert! r.months == 0
				assert! r.days == 6
			end

			should "subtract time span", ->
				s := Date::Span(10, 2, 9)
				var d: Duration = Time::Span(1, 2, 3)
				r := s - d
				assert! r <: DateTime::Span
				assert! r.years == 10
				assert! r.months == 2
				assert! r.days == 8
				assert! r.hours == 22
				assert! r.minutes == 57
				assert! r.seconds == 57
			end

			should "subtract datetime span", ->
				s := Date::Span(10, 2, 9)
				var d: Duration = DateTime::Span(1, 2, 3, 4, 5, 6)
				r := s - d
				assert! r <: DateTime::Span
				assert! r.years == 9
				assert! r.months == 0
				assert! r.days == 5
				assert! r.hours == 19
				assert! r.minutes == 54
				assert! r.seconds == 54
			end
		end

		should "subtract date span", ->
			s := Date::Span(10, 2, 9)
			r := s - Date::Span(1, 2, 3)
			assert! r <: Date::Span
			assert! r.years == 9
			assert! r.months == 0
			assert! r.days == 6
		end

		should "subtract time span", ->
			s := Date::Span(10, 2, 9)
			r := s - Time::Span(1, 2, 3)
			assert! r <: DateTime::Span
			assert! r.years == 10
			assert! r.months == 2
			assert! r.days == 8
			assert! r.hours == 22
			assert! r.minutes == 57
			assert! r.seconds == 57
		end

		should "subtract datetime span", ->
			s := Date::Span(10, 2, 9)
			r := s - DateTime::Span(1, 2, 3, 4, 5, 6)
			assert! r <: DateTime::Span
			assert! r.years == 9
			assert! r.months == 0
			assert! r.days == 5
			assert! r.hours == 19
			assert! r.minutes == 54
			assert! r.seconds == 54
		end
	end

	context "*", ->
		context "numeric argument", ->
			should "multiply int", ->
				s := Date::Span(10, 2, 9)
				var d: CoercibleNumeric = 2
				r := s * d
				assert! r <: Date::Span
				assert! r.years == 20
				assert! r.months == 4
				assert! r.days == 18
			end

			should "multiply float", ->
				s := Date::Span(10, 2, 9)
				var d: CoercibleNumeric = 2.5
				r := s * d
				assert! r <: DateTime::Span
				assert! r.years == 25
				assert! r.months == 5
				assert! r.days == 22
				assert! r.hours == 12
				assert! r.minutes == 0
				assert! r.seconds == 0
			end

			should "multiply big float", ->
				s := Date::Span(10, 2, 9)
				var d: CoercibleNumeric = 2.5bf
				r := s * d
				assert! r <: DateTime::Span
				assert! r.years == 25
				assert! r.months == 5
				assert! r.days == 22
				assert! r.hours == 12
				assert! r.minutes == 0
				assert! r.seconds == 0
			end
		end

		should "multiply int", ->
			s := Date::Span(10, 2, 9)
			r := s * 2
			assert! r <: Date::Span
			assert! r.years == 20
			assert! r.months == 4
			assert! r.days == 18
		end

		should "multiply float", ->
			s := Date::Span(10, 2, 9)
			r := s * 2.5
			assert! r <: DateTime::Span
			assert! r.years == 25
			assert! r.months == 5
			assert! r.days == 22
			assert! r.hours == 12
			assert! r.minutes == 0
			assert! r.seconds == 0
		end

		should "multiply big float", ->
			s := Date::Span(10, 2, 9)
			r := s * 2.5bf
			assert! r <: DateTime::Span
			assert! r.years == 25
			assert! r.months == 5
			assert! r.days == 22
			assert! r.hours == 12
			assert! r.minutes == 0
			assert! r.seconds == 0
		end
	end

	context "/", ->
		context "numeric argument", ->
			should "divide int", ->
				s := Date::Span(10, 2, 9)
				var d: CoercibleNumeric = 2
				r := s / d
				assert! r <: DateTime::Span
				assert! r.years == 5
				assert! r.months == 1
				assert! r.days == 4
				assert! r.hours == 12
				assert! r.minutes == 0
				assert! r.seconds == 0
			end

			should "divide float", ->
				s := Date::Span(10, 2, 9)
				var d: CoercibleNumeric = 2.5
				r := s / d
				assert! r <: DateTime::Span
				assert! r.years == 4
				assert! r.months == 0
				assert! r.days == 27
				assert! r.hours == 22
				assert! r.minutes == 47
				assert! r.seconds == 59
			end

			should "divide big float", ->
				s := Date::Span(10, 2, 9)
				var d: CoercibleNumeric = 2.5bf
				r := s / d
				assert! r <: DateTime::Span
				assert! r.years == 4
				assert! r.months == 0
				assert! r.days == 27
				assert! r.hours == 22
				assert! r.minutes == 47
				assert! r.seconds == 59
			end
		end

		should "divide int", ->
			s := Date::Span(10, 2, 9)
			r := s / 2
			assert! r <: DateTime::Span
			assert! r.years == 5
			assert! r.months == 1
			assert! r.days == 4
			assert! r.hours == 12
			assert! r.minutes == 0
			assert! r.seconds == 0
		end

		should "divide float", ->
			s := Date::Span(10, 2, 9)
			r := s / 2.5
			assert! r <: DateTime::Span
			assert! r.years == 4
			assert! r.months == 0
			assert! r.days == 27
			assert! r.hours == 22
			assert! r.minutes == 47
			assert! r.seconds == 59
		end

		should "divide big float", ->
			s := Date::Span(10, 2, 9)
			r := s / 2.5bf
			assert! r <: DateTime::Span
			assert! r.years == 4
			assert! r.months == 0
			assert! r.days == 27
			assert! r.hours == 22
			assert! r.minutes == 47
			assert! r.seconds == 59
		end
	end

end
