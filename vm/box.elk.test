using Std::Test::Assertions::*
using Std::Test::*

describe "Box", ->
	context "singleton", ->
		should "at", ->
			b := Box(3)
			v := Box.at(b.address)
			assert! v <<: Box
			assert! v.get == 3
			assert! v === b
		end
	end

	context "init", ->
		should "create a new box", ->
			b := Box(3)
			assert! b <<: Box
			assert! b.get == 3

			b.set(-25)
			assert! b.get == -25
		end
	end

	context "get", ->
		should "return the stored value", ->
			b := Box(3)
			assert! b.get == 3

			c := Box("foo")
			assert! c.get == "foo"
		end
	end

	context "to_box", ->
		should "return self", ->
			b := Box(3)
			v := b.to_box
			assert! v <<: Box
			assert! v.address == b.address
			assert! v === b
		end
	end

	context "to_immutable_box", ->
		should "convert to an immutable box", ->
			b := Box(3)
			v := b.to_immutable_box
			assert! v <<: ImmutableBox
			assert! v.address == b.address
		end
	end

	context "set", ->
		should "overwrite the stored value", ->
			b := Box(3)
			assert! b.get == 3

			b.set(9)
			assert! b.get == 9
		end
	end

	context "next", ->
		should "return the next box", ->
			arr := [3, 5, 8]
			a := arr.box_of(0)
			assert! a <<: Box
			assert! a.get == 3

			b := a.next
			assert! b <<: Box
			assert! b.get == 5

			b = a.next_box
			assert! b <<: Box
			assert! b.get == 5
		end

		should "return the second next box", ->
			arr := [3, 5, 8]
			a := arr.box_of(0)
			assert! a <<: Box
			assert! a.get == 3

			b := a.next(2)
			assert! b <<: Box
			assert! b.get == 8
		end
	end

	context "next_immutable_box", ->
		should "return the next box", ->
			arr := [3, 5, 8]
			a := arr.box_of(0)
			assert! a <<: Box
			assert! a.get == 3

			b := a.next_immutable_box
			assert! b <<: ImmutableBox
			assert! b.get == 5
		end

		should "return the second next box", ->
			arr := [3, 5, 8]
			a := arr.box_of(0)
			assert! a <<: Box
			assert! a.get == 3

			b := a.next_immutable_box(2)
			assert! b <<: ImmutableBox
			assert! b.get == 8
		end
	end

	context "prev", ->
		should "return the previous box", ->
			arr := [3, 5, 8]
			a := arr.box_of(-1)
			assert! a <<: Box
			assert! a.get == 8

			b := a.prev
			assert! b <<: Box
			assert! b.get == 5

			b = a.prev_box
			assert! b <<: Box
			assert! b.get == 5
		end

		should "return the second previous box", ->
			arr := [3, 5, 8]
			a := arr.box_of(-1)
			assert! a <<: Box
			assert! a.get == 8

			b := a.prev(2)
			assert! b <<: Box
			assert! b.get == 3
		end
	end

	context "prev_immutable_box", ->
		should "return the previous box", ->
			arr := [3, 5, 8]
			a := arr.box_of(-1)
			assert! a <<: Box
			assert! a.get == 8

			b := a.prev_immutable_box
			assert! b <<: ImmutableBox
			assert! b.get == 5
		end

		should "return the second previous box", ->
			arr := [3, 5, 8]
			a := arr.box_of(-1)
			assert! a <<: Box
			assert! a.get == 8

			b := a.prev_immutable_box(2)
			assert! b <<: ImmutableBox
			assert! b.get == 3
		end
	end

	context "address", ->
		should "return the raw address as UInt", ->
			b := Box(3)
			addr := b.address
			assert! addr <<: UInt

			c := Box.at(addr)
			assert! b.get == 3
		end
	end

	context "to_immutable_box", ->
		should "return an immutable box", ->
			b := Box(3)
			c := b.to_immutable_box
			assert! c <<: ImmutableBox
			assert! c.get == 3
		end
	end

end
