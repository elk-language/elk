// Code generated by "stringer -type=Type"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ZERO_VALUE-0]
	_ = x[ERROR-1]
	_ = x[END_OF_FILE-2]
	_ = x[NEWLINE-3]
	_ = x[SEMICOLON-4]
	_ = x[COMMA-5]
	_ = x[DOT-6]
	_ = x[QUESTION_DOT-7]
	_ = x[DOT_DOT-8]
	_ = x[QUESTION_DOT_DOT-9]
	_ = x[COLON-10]
	_ = x[QUESTION-11]
	_ = x[LABEL_OP_BEG-12]
	_ = x[THIN_ARROW-13]
	_ = x[WIGGLY_ARROW-14]
	_ = x[THICK_ARROW-15]
	_ = x[LABEL_ASSIGN_OP_BEG-16]
	_ = x[EQUAL_OP-17]
	_ = x[MINUS_EQUAL-18]
	_ = x[PLUS_EQUAL-19]
	_ = x[STAR_EQUAL-20]
	_ = x[SLASH_EQUAL-21]
	_ = x[STAR_STAR_EQUAL-22]
	_ = x[TILDE_EQUAL-23]
	_ = x[AND_AND_EQUAL-24]
	_ = x[AND_EQUAL-25]
	_ = x[OR_OR_EQUAL-26]
	_ = x[OR_EQUAL-27]
	_ = x[XOR_EQUAL-28]
	_ = x[QUESTION_QUESTION_EQUAL-29]
	_ = x[LBITSHIFT_EQUAL-30]
	_ = x[LTRIPLE_BITSHIFT_EQUAL-31]
	_ = x[RBITSHIFT_EQUAL-32]
	_ = x[RTRIPLE_BITSHIFT_EQUAL-33]
	_ = x[PERCENT_EQUAL-34]
	_ = x[COLON_EQUAL-35]
	_ = x[LABEL_ASSIGN_OP_END-36]
	_ = x[SHORT_UNQUOTE_BEG-37]
	_ = x[LPAREN-38]
	_ = x[RPAREN-39]
	_ = x[LBRACE-40]
	_ = x[RBRACE-41]
	_ = x[LBRACKET-42]
	_ = x[QUESTION_LBRACKET-43]
	_ = x[RBRACKET-44]
	_ = x[SCOPE_RES_OP-45]
	_ = x[COLON_COLON_LBRACKET-46]
	_ = x[DOT_COLON-47]
	_ = x[CLOSED_RANGE_OP-48]
	_ = x[OPEN_RANGE_OP-49]
	_ = x[RIGHT_OPEN_RANGE_OP-50]
	_ = x[LEFT_OPEN_RANGE_OP-51]
	_ = x[PIPE_OP-52]
	_ = x[AND_AND-53]
	_ = x[AND_BANG-54]
	_ = x[OR_OR-55]
	_ = x[OR_BANG-56]
	_ = x[NOT_EQUAL-57]
	_ = x[LAX_NOT_EQUAL-58]
	_ = x[STRICT_EQUAL-59]
	_ = x[STRICT_NOT_EQUAL-60]
	_ = x[QUESTION_QUESTION-61]
	_ = x[BANG-62]
	_ = x[ISA_OP-63]
	_ = x[REVERSE_ISA_OP-64]
	_ = x[INSTANCE_OF_OP-65]
	_ = x[REVERSE_INSTANCE_OF_OP-66]
	_ = x[LABEL_OVERRIDABLE_OP_BEG-67]
	_ = x[PLUS_PLUS-68]
	_ = x[MINUS_MINUS-69]
	_ = x[PLUS_AT-70]
	_ = x[MINUS_AT-71]
	_ = x[MINUS-72]
	_ = x[PLUS-73]
	_ = x[STAR-74]
	_ = x[SLASH-75]
	_ = x[STAR_STAR-76]
	_ = x[LESS-77]
	_ = x[LESS_EQUAL-78]
	_ = x[GREATER-79]
	_ = x[GREATER_EQUAL-80]
	_ = x[SPACESHIP_OP-81]
	_ = x[EQUAL_EQUAL-82]
	_ = x[LAX_EQUAL-83]
	_ = x[TILDE-84]
	_ = x[AND-85]
	_ = x[AND_TILDE-86]
	_ = x[OR-87]
	_ = x[XOR-88]
	_ = x[LBITSHIFT-89]
	_ = x[LTRIPLE_BITSHIFT-90]
	_ = x[RBITSHIFT-91]
	_ = x[RTRIPLE_BITSHIFT-92]
	_ = x[PERCENT-93]
	_ = x[LABEL_OP_END-94]
	_ = x[LABEL_IDENTIFIER_BEG-95]
	_ = x[DOLLAR_IDENTIFIER-96]
	_ = x[PUBLIC_IDENTIFIER-97]
	_ = x[PRIVATE_IDENTIFIER-98]
	_ = x[PUBLIC_CONSTANT-99]
	_ = x[PRIVATE_CONSTANT-100]
	_ = x[LABEL_IDENTIFIER_END-101]
	_ = x[INSTANCE_VARIABLE-102]
	_ = x[LABEL_LITERAL_BEG-103]
	_ = x[LABEL_SPECIAL_COLLECTION_LITERAL_BEG-104]
	_ = x[WORD_ARRAY_LIST_BEG-105]
	_ = x[WORD_ARRAY_LIST_END-106]
	_ = x[SYMBOL_ARRAY_LIST_BEG-107]
	_ = x[SYMBOL_ARRAY_LIST_END-108]
	_ = x[HEX_ARRAY_LIST_BEG-109]
	_ = x[HEX_ARRAY_LIST_END-110]
	_ = x[BIN_ARRAY_LIST_BEG-111]
	_ = x[BIN_ARRAY_LIST_END-112]
	_ = x[WORD_HASH_SET_BEG-113]
	_ = x[WORD_HASH_SET_END-114]
	_ = x[SYMBOL_HASH_SET_BEG-115]
	_ = x[SYMBOL_HASH_SET_END-116]
	_ = x[HEX_HASH_SET_BEG-117]
	_ = x[HEX_HASH_SET_END-118]
	_ = x[BIN_HASH_SET_BEG-119]
	_ = x[BIN_HASH_SET_END-120]
	_ = x[WORD_ARRAY_TUPLE_BEG-121]
	_ = x[WORD_ARRAY_TUPLE_END-122]
	_ = x[SYMBOL_ARRAY_TUPLE_BEG-123]
	_ = x[SYMBOL_ARRAY_TUPLE_END-124]
	_ = x[HEX_ARRAY_TUPLE_BEG-125]
	_ = x[HEX_ARRAY_TUPLE_END-126]
	_ = x[BIN_ARRAY_TUPLE_BEG-127]
	_ = x[BIN_ARRAY_TUPLE_END-128]
	_ = x[LABEL_SPECIAL_COLLECTION_LITERAL_END-129]
	_ = x[CLOSURE_TYPE_BEG-130]
	_ = x[HASH_SET_LITERAL_BEG-131]
	_ = x[TUPLE_LITERAL_BEG-132]
	_ = x[RECORD_LITERAL_BEG-133]
	_ = x[DOC_COMMENT-134]
	_ = x[RAW_STRING-135]
	_ = x[CHAR_LITERAL-136]
	_ = x[RAW_CHAR_LITERAL-137]
	_ = x[REGEX_BEG-138]
	_ = x[REGEX_CONTENT-139]
	_ = x[REGEX_INTERP_BEG-140]
	_ = x[REGEX_INTERP_END-141]
	_ = x[REGEX_END-142]
	_ = x[LABEL_REGEX_FLAG_BEG-143]
	_ = x[REGEX_FLAG_i-144]
	_ = x[REGEX_FLAG_m-145]
	_ = x[REGEX_FLAG_U-146]
	_ = x[REGEX_FLAG_a-147]
	_ = x[REGEX_FLAG_x-148]
	_ = x[REGEX_FLAG_s-149]
	_ = x[LABEL_REGEX_FLAG_END-150]
	_ = x[STRING_BEG-151]
	_ = x[STRING_CONTENT-152]
	_ = x[STRING_INTERP_LOCAL-153]
	_ = x[STRING_INTERP_CONSTANT-154]
	_ = x[STRING_INTERP_BEG-155]
	_ = x[STRING_INSPECT_INTERP_BEG-156]
	_ = x[STRING_INSPECT_INTERP_CONSTANT-157]
	_ = x[STRING_INSPECT_INTERP_LOCAL-158]
	_ = x[STRING_INTERP_END-159]
	_ = x[STRING_END-160]
	_ = x[LABEL_INT_LITERAL_BEG-161]
	_ = x[INT-162]
	_ = x[INT64-163]
	_ = x[UINT64-164]
	_ = x[INT32-165]
	_ = x[UINT32-166]
	_ = x[INT16-167]
	_ = x[UINT16-168]
	_ = x[INT8-169]
	_ = x[UINT8-170]
	_ = x[LABEL_INT_LITERAL_END-171]
	_ = x[LABEL_FLOAT_LITERAL_BEG-172]
	_ = x[FLOAT-173]
	_ = x[BIG_FLOAT-174]
	_ = x[FLOAT64-175]
	_ = x[FLOAT32-176]
	_ = x[LABEL_FLOAT_LITERAL_END-177]
	_ = x[LABEL_LITERAL_END-178]
	_ = x[LABEL_KEYWORD_BEG-179]
	_ = x[NIL-180]
	_ = x[FALSE-181]
	_ = x[TRUE-182]
	_ = x[IF-183]
	_ = x[ELSE-184]
	_ = x[ELSIF-185]
	_ = x[UNLESS-186]
	_ = x[WHILE-187]
	_ = x[UNTIL-188]
	_ = x[LOOP-189]
	_ = x[FOR-190]
	_ = x[FORNUM-191]
	_ = x[IN-192]
	_ = x[OF-193]
	_ = x[BREAK-194]
	_ = x[CONTINUE-195]
	_ = x[RETURN-196]
	_ = x[YIELD-197]
	_ = x[ASYNC-198]
	_ = x[AWAIT-199]
	_ = x[AWAIT_SYNC-200]
	_ = x[GO-201]
	_ = x[DEF-202]
	_ = x[SIG-203]
	_ = x[END-204]
	_ = x[THEN-205]
	_ = x[INIT-206]
	_ = x[NOINIT-207]
	_ = x[CLASS-208]
	_ = x[STRUCT-209]
	_ = x[MODULE-210]
	_ = x[MIXIN-211]
	_ = x[INTERFACE-212]
	_ = x[INCLUDE-213]
	_ = x[IMPLEMENT-214]
	_ = x[EXTEND-215]
	_ = x[ENUM-216]
	_ = x[TYPE-217]
	_ = x[TYPEDEF-218]
	_ = x[TYPEOF-219]
	_ = x[VAR-220]
	_ = x[VAL-221]
	_ = x[CONST-222]
	_ = x[THROW-223]
	_ = x[TRY-224]
	_ = x[CATCH-225]
	_ = x[DO-226]
	_ = x[FINALLY-227]
	_ = x[DEFER-228]
	_ = x[ALIAS-229]
	_ = x[AS-230]
	_ = x[IS-231]
	_ = x[SELF-232]
	_ = x[SUPER-233]
	_ = x[SWITCH-234]
	_ = x[CASE-235]
	_ = x[MATCH-236]
	_ = x[WITH-237]
	_ = x[USING-238]
	_ = x[BREAKPOINT-239]
	_ = x[GETTER-240]
	_ = x[SETTER-241]
	_ = x[ATTR-242]
	_ = x[MUST-243]
	_ = x[SINGLETON-244]
	_ = x[ABSTRACT-245]
	_ = x[SEALED-246]
	_ = x[VOID-247]
	_ = x[NEVER-248]
	_ = x[NOTHING-249]
	_ = x[ANY-250]
	_ = x[PRIMITIVE-251]
	_ = x[PUBLIC-252]
	_ = x[PRIVATE-253]
	_ = x[PROTECTED-254]
	_ = x[NATIVE-255]
	_ = x[DEFAULT-256]
	_ = x[MACRO-257]
	_ = x[BOOL-258]
	_ = x[NEW-259]
	_ = x[EXTERN-260]
	_ = x[IMPORT-261]
	_ = x[EXPORT-262]
	_ = x[WHERE-263]
	_ = x[UNTYPED-264]
	_ = x[UNCHECKED-265]
	_ = x[GOTO-266]
	_ = x[QUOTE-267]
	_ = x[QUOTE_EXPR-268]
	_ = x[QUOTE_TYPE-269]
	_ = x[QUOTE_PATTERN-270]
	_ = x[UNQUOTE-271]
	_ = x[UNQUOTE_EXPR-272]
	_ = x[UNQUOTE_TYPE-273]
	_ = x[UNQUOTE_IDENT-274]
	_ = x[UNQUOTE_CONST-275]
	_ = x[UNQUOTE_IVAR-276]
	_ = x[UNQUOTE_PATTERN-277]
	_ = x[UNDEFINED-278]
	_ = x[FUNC-279]
	_ = x[LABEL_KEYWORD_END-280]
}

const _Type_name = "ZERO_VALUEERROREND_OF_FILENEWLINESEMICOLONCOMMADOTQUESTION_DOTDOT_DOTQUESTION_DOT_DOTCOLONQUESTIONLABEL_OP_BEGTHIN_ARROWWIGGLY_ARROWTHICK_ARROWLABEL_ASSIGN_OP_BEGEQUAL_OPMINUS_EQUALPLUS_EQUALSTAR_EQUALSLASH_EQUALSTAR_STAR_EQUALTILDE_EQUALAND_AND_EQUALAND_EQUALOR_OR_EQUALOR_EQUALXOR_EQUALQUESTION_QUESTION_EQUALLBITSHIFT_EQUALLTRIPLE_BITSHIFT_EQUALRBITSHIFT_EQUALRTRIPLE_BITSHIFT_EQUALPERCENT_EQUALCOLON_EQUALLABEL_ASSIGN_OP_ENDSHORT_UNQUOTE_BEGLPARENRPARENLBRACERBRACELBRACKETQUESTION_LBRACKETRBRACKETSCOPE_RES_OPCOLON_COLON_LBRACKETDOT_COLONCLOSED_RANGE_OPOPEN_RANGE_OPRIGHT_OPEN_RANGE_OPLEFT_OPEN_RANGE_OPPIPE_OPAND_ANDAND_BANGOR_OROR_BANGNOT_EQUALLAX_NOT_EQUALSTRICT_EQUALSTRICT_NOT_EQUALQUESTION_QUESTIONBANGISA_OPREVERSE_ISA_OPINSTANCE_OF_OPREVERSE_INSTANCE_OF_OPLABEL_OVERRIDABLE_OP_BEGPLUS_PLUSMINUS_MINUSPLUS_ATMINUS_ATMINUSPLUSSTARSLASHSTAR_STARLESSLESS_EQUALGREATERGREATER_EQUALSPACESHIP_OPEQUAL_EQUALLAX_EQUALTILDEANDAND_TILDEORXORLBITSHIFTLTRIPLE_BITSHIFTRBITSHIFTRTRIPLE_BITSHIFTPERCENTLABEL_OP_ENDLABEL_IDENTIFIER_BEGDOLLAR_IDENTIFIERPUBLIC_IDENTIFIERPRIVATE_IDENTIFIERPUBLIC_CONSTANTPRIVATE_CONSTANTLABEL_IDENTIFIER_ENDINSTANCE_VARIABLELABEL_LITERAL_BEGLABEL_SPECIAL_COLLECTION_LITERAL_BEGWORD_ARRAY_LIST_BEGWORD_ARRAY_LIST_ENDSYMBOL_ARRAY_LIST_BEGSYMBOL_ARRAY_LIST_ENDHEX_ARRAY_LIST_BEGHEX_ARRAY_LIST_ENDBIN_ARRAY_LIST_BEGBIN_ARRAY_LIST_ENDWORD_HASH_SET_BEGWORD_HASH_SET_ENDSYMBOL_HASH_SET_BEGSYMBOL_HASH_SET_ENDHEX_HASH_SET_BEGHEX_HASH_SET_ENDBIN_HASH_SET_BEGBIN_HASH_SET_ENDWORD_ARRAY_TUPLE_BEGWORD_ARRAY_TUPLE_ENDSYMBOL_ARRAY_TUPLE_BEGSYMBOL_ARRAY_TUPLE_ENDHEX_ARRAY_TUPLE_BEGHEX_ARRAY_TUPLE_ENDBIN_ARRAY_TUPLE_BEGBIN_ARRAY_TUPLE_ENDLABEL_SPECIAL_COLLECTION_LITERAL_ENDCLOSURE_TYPE_BEGHASH_SET_LITERAL_BEGTUPLE_LITERAL_BEGRECORD_LITERAL_BEGDOC_COMMENTRAW_STRINGCHAR_LITERALRAW_CHAR_LITERALREGEX_BEGREGEX_CONTENTREGEX_INTERP_BEGREGEX_INTERP_ENDREGEX_ENDLABEL_REGEX_FLAG_BEGREGEX_FLAG_iREGEX_FLAG_mREGEX_FLAG_UREGEX_FLAG_aREGEX_FLAG_xREGEX_FLAG_sLABEL_REGEX_FLAG_ENDSTRING_BEGSTRING_CONTENTSTRING_INTERP_LOCALSTRING_INTERP_CONSTANTSTRING_INTERP_BEGSTRING_INSPECT_INTERP_BEGSTRING_INSPECT_INTERP_CONSTANTSTRING_INSPECT_INTERP_LOCALSTRING_INTERP_ENDSTRING_ENDLABEL_INT_LITERAL_BEGINTINT64UINT64INT32UINT32INT16UINT16INT8UINT8LABEL_INT_LITERAL_ENDLABEL_FLOAT_LITERAL_BEGFLOATBIG_FLOATFLOAT64FLOAT32LABEL_FLOAT_LITERAL_ENDLABEL_LITERAL_ENDLABEL_KEYWORD_BEGNILFALSETRUEIFELSEELSIFUNLESSWHILEUNTILLOOPFORFORNUMINOFBREAKCONTINUERETURNYIELDASYNCAWAITAWAIT_SYNCGODEFSIGENDTHENINITNOINITCLASSSTRUCTMODULEMIXININTERFACEINCLUDEIMPLEMENTEXTENDENUMTYPETYPEDEFTYPEOFVARVALCONSTTHROWTRYCATCHDOFINALLYDEFERALIASASISSELFSUPERSWITCHCASEMATCHWITHUSINGBREAKPOINTGETTERSETTERATTRMUSTSINGLETONABSTRACTSEALEDVOIDNEVERNOTHINGANYPRIMITIVEPUBLICPRIVATEPROTECTEDNATIVEDEFAULTMACROBOOLNEWEXTERNIMPORTEXPORTWHEREUNTYPEDUNCHECKEDGOTOQUOTEQUOTE_EXPRQUOTE_TYPEQUOTE_PATTERNUNQUOTEUNQUOTE_EXPRUNQUOTE_TYPEUNQUOTE_IDENTUNQUOTE_CONSTUNQUOTE_IVARUNQUOTE_PATTERNUNDEFINEDFUNCLABEL_KEYWORD_END"

var _Type_index = [...]uint16{0, 10, 15, 26, 33, 42, 47, 50, 62, 69, 85, 90, 98, 110, 120, 132, 143, 162, 170, 181, 191, 201, 212, 227, 238, 251, 260, 271, 279, 288, 311, 326, 348, 363, 385, 398, 409, 428, 445, 451, 457, 463, 469, 477, 494, 502, 514, 534, 543, 558, 571, 590, 608, 615, 622, 630, 635, 642, 651, 664, 676, 692, 709, 713, 719, 733, 747, 769, 793, 802, 813, 820, 828, 833, 837, 841, 846, 855, 859, 869, 876, 889, 901, 912, 921, 926, 929, 938, 940, 943, 952, 968, 977, 993, 1000, 1012, 1032, 1049, 1066, 1084, 1099, 1115, 1135, 1152, 1169, 1205, 1224, 1243, 1264, 1285, 1303, 1321, 1339, 1357, 1374, 1391, 1410, 1429, 1445, 1461, 1477, 1493, 1513, 1533, 1555, 1577, 1596, 1615, 1634, 1653, 1689, 1705, 1725, 1742, 1760, 1771, 1781, 1793, 1809, 1818, 1831, 1847, 1863, 1872, 1892, 1904, 1916, 1928, 1940, 1952, 1964, 1984, 1994, 2008, 2027, 2049, 2066, 2091, 2121, 2148, 2165, 2175, 2196, 2199, 2204, 2210, 2215, 2221, 2226, 2232, 2236, 2241, 2262, 2285, 2290, 2299, 2306, 2313, 2336, 2353, 2370, 2373, 2378, 2382, 2384, 2388, 2393, 2399, 2404, 2409, 2413, 2416, 2422, 2424, 2426, 2431, 2439, 2445, 2450, 2455, 2460, 2470, 2472, 2475, 2478, 2481, 2485, 2489, 2495, 2500, 2506, 2512, 2517, 2526, 2533, 2542, 2548, 2552, 2556, 2563, 2569, 2572, 2575, 2580, 2585, 2588, 2593, 2595, 2602, 2607, 2612, 2614, 2616, 2620, 2625, 2631, 2635, 2640, 2644, 2649, 2659, 2665, 2671, 2675, 2679, 2688, 2696, 2702, 2706, 2711, 2718, 2721, 2730, 2736, 2743, 2752, 2758, 2765, 2770, 2774, 2777, 2783, 2789, 2795, 2800, 2807, 2816, 2820, 2825, 2835, 2845, 2858, 2865, 2877, 2889, 2902, 2915, 2927, 2942, 2951, 2955, 2972}

func (i Type) String() string {
	if i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
