// Code generated by "stringer -type=Type"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ZERO_VALUE-0]
	_ = x[ERROR-1]
	_ = x[END_OF_FILE-2]
	_ = x[NEWLINE-3]
	_ = x[SEMICOLON-4]
	_ = x[COMMA-5]
	_ = x[DOT-6]
	_ = x[QUESTION_DOT-7]
	_ = x[DOT_DOT-8]
	_ = x[QUESTION_DOT_DOT-9]
	_ = x[COLON-10]
	_ = x[QUESTION-11]
	_ = x[LABEL_OP_BEG-12]
	_ = x[THIN_ARROW-13]
	_ = x[WIGGLY_ARROW-14]
	_ = x[THICK_ARROW-15]
	_ = x[LABEL_ASSIGN_OP_BEG-16]
	_ = x[EQUAL_OP-17]
	_ = x[MINUS_EQUAL-18]
	_ = x[PLUS_EQUAL-19]
	_ = x[STAR_EQUAL-20]
	_ = x[SLASH_EQUAL-21]
	_ = x[STAR_STAR_EQUAL-22]
	_ = x[TILDE_EQUAL-23]
	_ = x[AND_AND_EQUAL-24]
	_ = x[AND_EQUAL-25]
	_ = x[OR_OR_EQUAL-26]
	_ = x[OR_EQUAL-27]
	_ = x[XOR_EQUAL-28]
	_ = x[QUESTION_QUESTION_EQUAL-29]
	_ = x[LBITSHIFT_EQUAL-30]
	_ = x[LTRIPLE_BITSHIFT_EQUAL-31]
	_ = x[RBITSHIFT_EQUAL-32]
	_ = x[RTRIPLE_BITSHIFT_EQUAL-33]
	_ = x[PERCENT_EQUAL-34]
	_ = x[COLON_EQUAL-35]
	_ = x[LABEL_ASSIGN_OP_END-36]
	_ = x[SHORT_UNQUOTE_BEG-37]
	_ = x[LPAREN-38]
	_ = x[RPAREN-39]
	_ = x[LBRACE-40]
	_ = x[RBRACE-41]
	_ = x[LBRACKET-42]
	_ = x[QUESTION_LBRACKET-43]
	_ = x[RBRACKET-44]
	_ = x[SCOPE_RES_OP-45]
	_ = x[COLON_COLON_LBRACKET-46]
	_ = x[DOT_COLON-47]
	_ = x[CLOSED_RANGE_OP-48]
	_ = x[OPEN_RANGE_OP-49]
	_ = x[RIGHT_OPEN_RANGE_OP-50]
	_ = x[LEFT_OPEN_RANGE_OP-51]
	_ = x[PIPE_OP-52]
	_ = x[AND_AND-53]
	_ = x[AND_BANG-54]
	_ = x[OR_OR-55]
	_ = x[OR_BANG-56]
	_ = x[NOT_EQUAL-57]
	_ = x[LAX_NOT_EQUAL-58]
	_ = x[STRICT_EQUAL-59]
	_ = x[STRICT_NOT_EQUAL-60]
	_ = x[QUESTION_QUESTION-61]
	_ = x[BANG-62]
	_ = x[ISA_OP-63]
	_ = x[REVERSE_ISA_OP-64]
	_ = x[INSTANCE_OF_OP-65]
	_ = x[REVERSE_INSTANCE_OF_OP-66]
	_ = x[LABEL_OVERRIDABLE_OP_BEG-67]
	_ = x[PLUS_PLUS-68]
	_ = x[MINUS_MINUS-69]
	_ = x[PLUS_AT-70]
	_ = x[MINUS_AT-71]
	_ = x[MINUS-72]
	_ = x[PLUS-73]
	_ = x[STAR-74]
	_ = x[SLASH-75]
	_ = x[STAR_STAR-76]
	_ = x[LESS-77]
	_ = x[LESS_EQUAL-78]
	_ = x[GREATER-79]
	_ = x[GREATER_EQUAL-80]
	_ = x[SPACESHIP_OP-81]
	_ = x[EQUAL_EQUAL-82]
	_ = x[LAX_EQUAL-83]
	_ = x[TILDE-84]
	_ = x[AND-85]
	_ = x[AND_TILDE-86]
	_ = x[OR-87]
	_ = x[XOR-88]
	_ = x[LBITSHIFT-89]
	_ = x[LTRIPLE_BITSHIFT-90]
	_ = x[RBITSHIFT-91]
	_ = x[RTRIPLE_BITSHIFT-92]
	_ = x[PERCENT-93]
	_ = x[LABEL_OP_END-94]
	_ = x[LABEL_IDENTIFIER_BEG-95]
	_ = x[PUBLIC_IDENTIFIER-96]
	_ = x[PRIVATE_IDENTIFIER-97]
	_ = x[PUBLIC_CONSTANT-98]
	_ = x[PRIVATE_CONSTANT-99]
	_ = x[LABEL_IDENTIFIER_END-100]
	_ = x[INSTANCE_VARIABLE-101]
	_ = x[LABEL_LITERAL_BEG-102]
	_ = x[LABEL_SPECIAL_COLLECTION_LITERAL_BEG-103]
	_ = x[WORD_ARRAY_LIST_BEG-104]
	_ = x[WORD_ARRAY_LIST_END-105]
	_ = x[SYMBOL_ARRAY_LIST_BEG-106]
	_ = x[SYMBOL_ARRAY_LIST_END-107]
	_ = x[HEX_ARRAY_LIST_BEG-108]
	_ = x[HEX_ARRAY_LIST_END-109]
	_ = x[BIN_ARRAY_LIST_BEG-110]
	_ = x[BIN_ARRAY_LIST_END-111]
	_ = x[WORD_HASH_SET_BEG-112]
	_ = x[WORD_HASH_SET_END-113]
	_ = x[SYMBOL_HASH_SET_BEG-114]
	_ = x[SYMBOL_HASH_SET_END-115]
	_ = x[HEX_HASH_SET_BEG-116]
	_ = x[HEX_HASH_SET_END-117]
	_ = x[BIN_HASH_SET_BEG-118]
	_ = x[BIN_HASH_SET_END-119]
	_ = x[WORD_ARRAY_TUPLE_BEG-120]
	_ = x[WORD_ARRAY_TUPLE_END-121]
	_ = x[SYMBOL_ARRAY_TUPLE_BEG-122]
	_ = x[SYMBOL_ARRAY_TUPLE_END-123]
	_ = x[HEX_ARRAY_TUPLE_BEG-124]
	_ = x[HEX_ARRAY_TUPLE_END-125]
	_ = x[BIN_ARRAY_TUPLE_BEG-126]
	_ = x[BIN_ARRAY_TUPLE_END-127]
	_ = x[LABEL_SPECIAL_COLLECTION_LITERAL_END-128]
	_ = x[HASH_SET_LITERAL_BEG-129]
	_ = x[TUPLE_LITERAL_BEG-130]
	_ = x[RECORD_LITERAL_BEG-131]
	_ = x[DOC_COMMENT-132]
	_ = x[RAW_STRING-133]
	_ = x[CHAR_LITERAL-134]
	_ = x[RAW_CHAR_LITERAL-135]
	_ = x[REGEX_BEG-136]
	_ = x[REGEX_CONTENT-137]
	_ = x[REGEX_INTERP_BEG-138]
	_ = x[REGEX_INTERP_END-139]
	_ = x[REGEX_END-140]
	_ = x[LABEL_REGEX_FLAG_BEG-141]
	_ = x[REGEX_FLAG_i-142]
	_ = x[REGEX_FLAG_m-143]
	_ = x[REGEX_FLAG_U-144]
	_ = x[REGEX_FLAG_a-145]
	_ = x[REGEX_FLAG_x-146]
	_ = x[REGEX_FLAG_s-147]
	_ = x[LABEL_REGEX_FLAG_END-148]
	_ = x[STRING_BEG-149]
	_ = x[STRING_CONTENT-150]
	_ = x[STRING_INTERP_LOCAL-151]
	_ = x[STRING_INTERP_CONSTANT-152]
	_ = x[STRING_INTERP_BEG-153]
	_ = x[STRING_INSPECT_INTERP_BEG-154]
	_ = x[STRING_INSPECT_INTERP_CONSTANT-155]
	_ = x[STRING_INSPECT_INTERP_LOCAL-156]
	_ = x[STRING_INTERP_END-157]
	_ = x[STRING_END-158]
	_ = x[LABEL_INT_LITERAL_BEG-159]
	_ = x[INT-160]
	_ = x[INT64-161]
	_ = x[UINT64-162]
	_ = x[INT32-163]
	_ = x[UINT32-164]
	_ = x[INT16-165]
	_ = x[UINT16-166]
	_ = x[INT8-167]
	_ = x[UINT8-168]
	_ = x[LABEL_INT_LITERAL_END-169]
	_ = x[LABEL_FLOAT_LITERAL_BEG-170]
	_ = x[FLOAT-171]
	_ = x[BIG_FLOAT-172]
	_ = x[FLOAT64-173]
	_ = x[FLOAT32-174]
	_ = x[LABEL_FLOAT_LITERAL_END-175]
	_ = x[LABEL_LITERAL_END-176]
	_ = x[LABEL_KEYWORD_BEG-177]
	_ = x[NIL-178]
	_ = x[FALSE-179]
	_ = x[TRUE-180]
	_ = x[IF-181]
	_ = x[ELSE-182]
	_ = x[ELSIF-183]
	_ = x[UNLESS-184]
	_ = x[WHILE-185]
	_ = x[UNTIL-186]
	_ = x[LOOP-187]
	_ = x[FOR-188]
	_ = x[FORNUM-189]
	_ = x[IN-190]
	_ = x[BREAK-191]
	_ = x[CONTINUE-192]
	_ = x[RETURN-193]
	_ = x[YIELD-194]
	_ = x[ASYNC-195]
	_ = x[AWAIT-196]
	_ = x[GO-197]
	_ = x[DEF-198]
	_ = x[SIG-199]
	_ = x[END-200]
	_ = x[THEN-201]
	_ = x[INIT-202]
	_ = x[NOINIT-203]
	_ = x[CLASS-204]
	_ = x[STRUCT-205]
	_ = x[MODULE-206]
	_ = x[MIXIN-207]
	_ = x[INTERFACE-208]
	_ = x[INCLUDE-209]
	_ = x[IMPLEMENT-210]
	_ = x[EXTEND-211]
	_ = x[ENUM-212]
	_ = x[TYPE-213]
	_ = x[TYPEDEF-214]
	_ = x[TYPEOF-215]
	_ = x[VAR-216]
	_ = x[VAL-217]
	_ = x[CONST-218]
	_ = x[THROW-219]
	_ = x[TRY-220]
	_ = x[CATCH-221]
	_ = x[DO-222]
	_ = x[FINALLY-223]
	_ = x[ALIAS-224]
	_ = x[AS-225]
	_ = x[IS-226]
	_ = x[SELF-227]
	_ = x[SUPER-228]
	_ = x[SWITCH-229]
	_ = x[CASE-230]
	_ = x[MATCH-231]
	_ = x[WITH-232]
	_ = x[USING-233]
	_ = x[BREAKPOINT-234]
	_ = x[GETTER-235]
	_ = x[SETTER-236]
	_ = x[ATTR-237]
	_ = x[MUST-238]
	_ = x[SINGLETON-239]
	_ = x[ABSTRACT-240]
	_ = x[SEALED-241]
	_ = x[VOID-242]
	_ = x[NEVER-243]
	_ = x[NOTHING-244]
	_ = x[ANY-245]
	_ = x[PRIMITIVE-246]
	_ = x[NATIVE-247]
	_ = x[DEFAULT-248]
	_ = x[MACRO-249]
	_ = x[BOOL-250]
	_ = x[NEW-251]
	_ = x[IMPORT-252]
	_ = x[WHERE-253]
	_ = x[UNTYPED-254]
	_ = x[UNCHECKED-255]
	_ = x[GOTO-256]
	_ = x[QUOTE-257]
	_ = x[UNQUOTE-258]
	_ = x[UNQUOTE_IDENT-259]
	_ = x[UNQUOTE_CONST-260]
	_ = x[UNQUOTE_IVAR-261]
	_ = x[UNQUOTE_PATTERN-262]
	_ = x[UNDEFINED-263]
	_ = x[LABEL_KEYWORD_END-264]
}

const _Type_name = "ZERO_VALUEERROREND_OF_FILENEWLINESEMICOLONCOMMADOTQUESTION_DOTDOT_DOTQUESTION_DOT_DOTCOLONQUESTIONLABEL_OP_BEGTHIN_ARROWWIGGLY_ARROWTHICK_ARROWLABEL_ASSIGN_OP_BEGEQUAL_OPMINUS_EQUALPLUS_EQUALSTAR_EQUALSLASH_EQUALSTAR_STAR_EQUALTILDE_EQUALAND_AND_EQUALAND_EQUALOR_OR_EQUALOR_EQUALXOR_EQUALQUESTION_QUESTION_EQUALLBITSHIFT_EQUALLTRIPLE_BITSHIFT_EQUALRBITSHIFT_EQUALRTRIPLE_BITSHIFT_EQUALPERCENT_EQUALCOLON_EQUALLABEL_ASSIGN_OP_ENDSHORT_UNQUOTE_BEGLPARENRPARENLBRACERBRACELBRACKETQUESTION_LBRACKETRBRACKETSCOPE_RES_OPCOLON_COLON_LBRACKETDOT_COLONCLOSED_RANGE_OPOPEN_RANGE_OPRIGHT_OPEN_RANGE_OPLEFT_OPEN_RANGE_OPPIPE_OPAND_ANDAND_BANGOR_OROR_BANGNOT_EQUALLAX_NOT_EQUALSTRICT_EQUALSTRICT_NOT_EQUALQUESTION_QUESTIONBANGISA_OPREVERSE_ISA_OPINSTANCE_OF_OPREVERSE_INSTANCE_OF_OPLABEL_OVERRIDABLE_OP_BEGPLUS_PLUSMINUS_MINUSPLUS_ATMINUS_ATMINUSPLUSSTARSLASHSTAR_STARLESSLESS_EQUALGREATERGREATER_EQUALSPACESHIP_OPEQUAL_EQUALLAX_EQUALTILDEANDAND_TILDEORXORLBITSHIFTLTRIPLE_BITSHIFTRBITSHIFTRTRIPLE_BITSHIFTPERCENTLABEL_OP_ENDLABEL_IDENTIFIER_BEGPUBLIC_IDENTIFIERPRIVATE_IDENTIFIERPUBLIC_CONSTANTPRIVATE_CONSTANTLABEL_IDENTIFIER_ENDINSTANCE_VARIABLELABEL_LITERAL_BEGLABEL_SPECIAL_COLLECTION_LITERAL_BEGWORD_ARRAY_LIST_BEGWORD_ARRAY_LIST_ENDSYMBOL_ARRAY_LIST_BEGSYMBOL_ARRAY_LIST_ENDHEX_ARRAY_LIST_BEGHEX_ARRAY_LIST_ENDBIN_ARRAY_LIST_BEGBIN_ARRAY_LIST_ENDWORD_HASH_SET_BEGWORD_HASH_SET_ENDSYMBOL_HASH_SET_BEGSYMBOL_HASH_SET_ENDHEX_HASH_SET_BEGHEX_HASH_SET_ENDBIN_HASH_SET_BEGBIN_HASH_SET_ENDWORD_ARRAY_TUPLE_BEGWORD_ARRAY_TUPLE_ENDSYMBOL_ARRAY_TUPLE_BEGSYMBOL_ARRAY_TUPLE_ENDHEX_ARRAY_TUPLE_BEGHEX_ARRAY_TUPLE_ENDBIN_ARRAY_TUPLE_BEGBIN_ARRAY_TUPLE_ENDLABEL_SPECIAL_COLLECTION_LITERAL_ENDHASH_SET_LITERAL_BEGTUPLE_LITERAL_BEGRECORD_LITERAL_BEGDOC_COMMENTRAW_STRINGCHAR_LITERALRAW_CHAR_LITERALREGEX_BEGREGEX_CONTENTREGEX_INTERP_BEGREGEX_INTERP_ENDREGEX_ENDLABEL_REGEX_FLAG_BEGREGEX_FLAG_iREGEX_FLAG_mREGEX_FLAG_UREGEX_FLAG_aREGEX_FLAG_xREGEX_FLAG_sLABEL_REGEX_FLAG_ENDSTRING_BEGSTRING_CONTENTSTRING_INTERP_LOCALSTRING_INTERP_CONSTANTSTRING_INTERP_BEGSTRING_INSPECT_INTERP_BEGSTRING_INSPECT_INTERP_CONSTANTSTRING_INSPECT_INTERP_LOCALSTRING_INTERP_ENDSTRING_ENDLABEL_INT_LITERAL_BEGINTINT64UINT64INT32UINT32INT16UINT16INT8UINT8LABEL_INT_LITERAL_ENDLABEL_FLOAT_LITERAL_BEGFLOATBIG_FLOATFLOAT64FLOAT32LABEL_FLOAT_LITERAL_ENDLABEL_LITERAL_ENDLABEL_KEYWORD_BEGNILFALSETRUEIFELSEELSIFUNLESSWHILEUNTILLOOPFORFORNUMINBREAKCONTINUERETURNYIELDASYNCAWAITGODEFSIGENDTHENINITNOINITCLASSSTRUCTMODULEMIXININTERFACEINCLUDEIMPLEMENTEXTENDENUMTYPETYPEDEFTYPEOFVARVALCONSTTHROWTRYCATCHDOFINALLYALIASASISSELFSUPERSWITCHCASEMATCHWITHUSINGBREAKPOINTGETTERSETTERATTRMUSTSINGLETONABSTRACTSEALEDVOIDNEVERNOTHINGANYPRIMITIVENATIVEDEFAULTMACROBOOLNEWIMPORTWHEREUNTYPEDUNCHECKEDGOTOQUOTEUNQUOTEUNQUOTE_IDENTUNQUOTE_CONSTUNQUOTE_IVARUNQUOTE_PATTERNUNDEFINEDLABEL_KEYWORD_END"

var _Type_index = [...]uint16{0, 10, 15, 26, 33, 42, 47, 50, 62, 69, 85, 90, 98, 110, 120, 132, 143, 162, 170, 181, 191, 201, 212, 227, 238, 251, 260, 271, 279, 288, 311, 326, 348, 363, 385, 398, 409, 428, 445, 451, 457, 463, 469, 477, 494, 502, 514, 534, 543, 558, 571, 590, 608, 615, 622, 630, 635, 642, 651, 664, 676, 692, 709, 713, 719, 733, 747, 769, 793, 802, 813, 820, 828, 833, 837, 841, 846, 855, 859, 869, 876, 889, 901, 912, 921, 926, 929, 938, 940, 943, 952, 968, 977, 993, 1000, 1012, 1032, 1049, 1067, 1082, 1098, 1118, 1135, 1152, 1188, 1207, 1226, 1247, 1268, 1286, 1304, 1322, 1340, 1357, 1374, 1393, 1412, 1428, 1444, 1460, 1476, 1496, 1516, 1538, 1560, 1579, 1598, 1617, 1636, 1672, 1692, 1709, 1727, 1738, 1748, 1760, 1776, 1785, 1798, 1814, 1830, 1839, 1859, 1871, 1883, 1895, 1907, 1919, 1931, 1951, 1961, 1975, 1994, 2016, 2033, 2058, 2088, 2115, 2132, 2142, 2163, 2166, 2171, 2177, 2182, 2188, 2193, 2199, 2203, 2208, 2229, 2252, 2257, 2266, 2273, 2280, 2303, 2320, 2337, 2340, 2345, 2349, 2351, 2355, 2360, 2366, 2371, 2376, 2380, 2383, 2389, 2391, 2396, 2404, 2410, 2415, 2420, 2425, 2427, 2430, 2433, 2436, 2440, 2444, 2450, 2455, 2461, 2467, 2472, 2481, 2488, 2497, 2503, 2507, 2511, 2518, 2524, 2527, 2530, 2535, 2540, 2543, 2548, 2550, 2557, 2562, 2564, 2566, 2570, 2575, 2581, 2585, 2590, 2594, 2599, 2609, 2615, 2621, 2625, 2629, 2638, 2646, 2652, 2656, 2661, 2668, 2671, 2680, 2686, 2693, 2698, 2702, 2705, 2711, 2716, 2723, 2732, 2736, 2741, 2748, 2761, 2774, 2786, 2801, 2810, 2827}

func (i Type) String() string {
	if i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
