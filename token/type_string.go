// Code generated by "stringer -type=Type"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ZERO_VALUE-0]
	_ = x[ERROR-1]
	_ = x[END_OF_FILE-2]
	_ = x[TEXT-3]
	_ = x[NEWLINE-4]
	_ = x[SEMICOLON-5]
	_ = x[COMMA-6]
	_ = x[DOT-7]
	_ = x[QUESTION_DOT-8]
	_ = x[DOT_DOT-9]
	_ = x[QUESTION_DOT_DOT-10]
	_ = x[COLON-11]
	_ = x[QUESTION-12]
	_ = x[LABEL_OP_BEG-13]
	_ = x[THIN_ARROW-14]
	_ = x[WIGGLY_ARROW-15]
	_ = x[THICK_ARROW-16]
	_ = x[LABEL_ASSIGN_OP_BEG-17]
	_ = x[EQUAL_OP-18]
	_ = x[MINUS_EQUAL-19]
	_ = x[PLUS_EQUAL-20]
	_ = x[STAR_EQUAL-21]
	_ = x[SLASH_EQUAL-22]
	_ = x[STAR_STAR_EQUAL-23]
	_ = x[TILDE_EQUAL-24]
	_ = x[AND_AND_EQUAL-25]
	_ = x[AND_EQUAL-26]
	_ = x[OR_OR_EQUAL-27]
	_ = x[OR_EQUAL-28]
	_ = x[XOR_EQUAL-29]
	_ = x[QUESTION_QUESTION_EQUAL-30]
	_ = x[LBITSHIFT_EQUAL-31]
	_ = x[LTRIPLE_BITSHIFT_EQUAL-32]
	_ = x[RBITSHIFT_EQUAL-33]
	_ = x[RTRIPLE_BITSHIFT_EQUAL-34]
	_ = x[PERCENT_EQUAL-35]
	_ = x[COLON_EQUAL-36]
	_ = x[LABEL_ASSIGN_OP_END-37]
	_ = x[SHORT_UNQUOTE_BEG-38]
	_ = x[LPAREN-39]
	_ = x[RPAREN-40]
	_ = x[LBRACE-41]
	_ = x[RBRACE-42]
	_ = x[LBRACKET-43]
	_ = x[QUESTION_LBRACKET-44]
	_ = x[RBRACKET-45]
	_ = x[SCOPE_RES_OP-46]
	_ = x[COLON_COLON_LBRACKET-47]
	_ = x[DOT_COLON-48]
	_ = x[CLOSED_RANGE_OP-49]
	_ = x[OPEN_RANGE_OP-50]
	_ = x[RIGHT_OPEN_RANGE_OP-51]
	_ = x[LEFT_OPEN_RANGE_OP-52]
	_ = x[PIPE_OP-53]
	_ = x[AND_AND-54]
	_ = x[AND_BANG-55]
	_ = x[OR_OR-56]
	_ = x[OR_BANG-57]
	_ = x[NOT_EQUAL-58]
	_ = x[LAX_NOT_EQUAL-59]
	_ = x[STRICT_EQUAL-60]
	_ = x[STRICT_NOT_EQUAL-61]
	_ = x[QUESTION_QUESTION-62]
	_ = x[BANG-63]
	_ = x[ISA_OP-64]
	_ = x[REVERSE_ISA_OP-65]
	_ = x[INSTANCE_OF_OP-66]
	_ = x[REVERSE_INSTANCE_OF_OP-67]
	_ = x[LABEL_OVERRIDABLE_OP_BEG-68]
	_ = x[PLUS_PLUS-69]
	_ = x[MINUS_MINUS-70]
	_ = x[PLUS_AT-71]
	_ = x[MINUS_AT-72]
	_ = x[MINUS-73]
	_ = x[PLUS-74]
	_ = x[STAR-75]
	_ = x[SLASH-76]
	_ = x[STAR_STAR-77]
	_ = x[LESS-78]
	_ = x[LESS_EQUAL-79]
	_ = x[GREATER-80]
	_ = x[GREATER_EQUAL-81]
	_ = x[SPACESHIP_OP-82]
	_ = x[EQUAL_EQUAL-83]
	_ = x[LAX_EQUAL-84]
	_ = x[TILDE-85]
	_ = x[AND-86]
	_ = x[AND_TILDE-87]
	_ = x[OR-88]
	_ = x[XOR-89]
	_ = x[LBITSHIFT-90]
	_ = x[LTRIPLE_BITSHIFT-91]
	_ = x[RBITSHIFT-92]
	_ = x[RTRIPLE_BITSHIFT-93]
	_ = x[PERCENT-94]
	_ = x[LABEL_OP_END-95]
	_ = x[LABEL_IDENTIFIER_BEG-96]
	_ = x[DOLLAR_IDENTIFIER-97]
	_ = x[PUBLIC_IDENTIFIER-98]
	_ = x[PRIVATE_IDENTIFIER-99]
	_ = x[PUBLIC_CONSTANT-100]
	_ = x[PRIVATE_CONSTANT-101]
	_ = x[LABEL_IDENTIFIER_END-102]
	_ = x[INSTANCE_VARIABLE-103]
	_ = x[LABEL_LITERAL_BEG-104]
	_ = x[LABEL_SPECIAL_COLLECTION_LITERAL_BEG-105]
	_ = x[WORD_ARRAY_LIST_BEG-106]
	_ = x[WORD_ARRAY_LIST_END-107]
	_ = x[SYMBOL_ARRAY_LIST_BEG-108]
	_ = x[SYMBOL_ARRAY_LIST_END-109]
	_ = x[HEX_ARRAY_LIST_BEG-110]
	_ = x[HEX_ARRAY_LIST_END-111]
	_ = x[BIN_ARRAY_LIST_BEG-112]
	_ = x[BIN_ARRAY_LIST_END-113]
	_ = x[WORD_HASH_SET_BEG-114]
	_ = x[WORD_HASH_SET_END-115]
	_ = x[SYMBOL_HASH_SET_BEG-116]
	_ = x[SYMBOL_HASH_SET_END-117]
	_ = x[HEX_HASH_SET_BEG-118]
	_ = x[HEX_HASH_SET_END-119]
	_ = x[BIN_HASH_SET_BEG-120]
	_ = x[BIN_HASH_SET_END-121]
	_ = x[WORD_ARRAY_TUPLE_BEG-122]
	_ = x[WORD_ARRAY_TUPLE_END-123]
	_ = x[SYMBOL_ARRAY_TUPLE_BEG-124]
	_ = x[SYMBOL_ARRAY_TUPLE_END-125]
	_ = x[HEX_ARRAY_TUPLE_BEG-126]
	_ = x[HEX_ARRAY_TUPLE_END-127]
	_ = x[BIN_ARRAY_TUPLE_BEG-128]
	_ = x[BIN_ARRAY_TUPLE_END-129]
	_ = x[LABEL_SPECIAL_COLLECTION_LITERAL_END-130]
	_ = x[CLOSURE_TYPE_BEG-131]
	_ = x[HASH_SET_LITERAL_BEG-132]
	_ = x[TUPLE_LITERAL_BEG-133]
	_ = x[RECORD_LITERAL_BEG-134]
	_ = x[DOC_COMMENT-135]
	_ = x[RAW_STRING-136]
	_ = x[CHAR_LITERAL-137]
	_ = x[RAW_CHAR_LITERAL-138]
	_ = x[REGEX_BEG-139]
	_ = x[REGEX_CONTENT-140]
	_ = x[REGEX_INTERP_BEG-141]
	_ = x[REGEX_INTERP_END-142]
	_ = x[REGEX_END-143]
	_ = x[LABEL_REGEX_FLAG_BEG-144]
	_ = x[REGEX_FLAG_i-145]
	_ = x[REGEX_FLAG_m-146]
	_ = x[REGEX_FLAG_U-147]
	_ = x[REGEX_FLAG_a-148]
	_ = x[REGEX_FLAG_x-149]
	_ = x[REGEX_FLAG_s-150]
	_ = x[LABEL_REGEX_FLAG_END-151]
	_ = x[STRING_BEG-152]
	_ = x[STRING_CONTENT-153]
	_ = x[STRING_INTERP_LOCAL-154]
	_ = x[STRING_INTERP_CONSTANT-155]
	_ = x[STRING_INTERP_BEG-156]
	_ = x[STRING_INSPECT_INTERP_BEG-157]
	_ = x[STRING_INSPECT_INTERP_CONSTANT-158]
	_ = x[STRING_INSPECT_INTERP_LOCAL-159]
	_ = x[STRING_INTERP_END-160]
	_ = x[STRING_END-161]
	_ = x[LABEL_INT_LITERAL_BEG-162]
	_ = x[INT-163]
	_ = x[UINT-164]
	_ = x[INT64-165]
	_ = x[UINT64-166]
	_ = x[INT32-167]
	_ = x[UINT32-168]
	_ = x[INT16-169]
	_ = x[UINT16-170]
	_ = x[INT8-171]
	_ = x[UINT8-172]
	_ = x[LABEL_INT_LITERAL_END-173]
	_ = x[LABEL_FLOAT_LITERAL_BEG-174]
	_ = x[FLOAT-175]
	_ = x[BIG_FLOAT-176]
	_ = x[FLOAT64-177]
	_ = x[FLOAT32-178]
	_ = x[LABEL_FLOAT_LITERAL_END-179]
	_ = x[LABEL_LITERAL_END-180]
	_ = x[LABEL_KEYWORD_BEG-181]
	_ = x[NIL-182]
	_ = x[FALSE-183]
	_ = x[TRUE-184]
	_ = x[IF-185]
	_ = x[ELSE-186]
	_ = x[ELSIF-187]
	_ = x[UNLESS-188]
	_ = x[WHILE-189]
	_ = x[UNTIL-190]
	_ = x[LOOP-191]
	_ = x[FOR-192]
	_ = x[FORNUM-193]
	_ = x[IN-194]
	_ = x[OF-195]
	_ = x[BREAK-196]
	_ = x[CONTINUE-197]
	_ = x[RETURN-198]
	_ = x[YIELD-199]
	_ = x[ASYNC-200]
	_ = x[AWAIT-201]
	_ = x[AWAIT_SYNC-202]
	_ = x[GO-203]
	_ = x[DEF-204]
	_ = x[SIG-205]
	_ = x[END-206]
	_ = x[THEN-207]
	_ = x[INIT-208]
	_ = x[NOINIT-209]
	_ = x[CLASS-210]
	_ = x[STRUCT-211]
	_ = x[MODULE-212]
	_ = x[MIXIN-213]
	_ = x[INTERFACE-214]
	_ = x[INCLUDE-215]
	_ = x[IMPLEMENT-216]
	_ = x[EXTEND-217]
	_ = x[ENUM-218]
	_ = x[TYPE-219]
	_ = x[TYPEDEF-220]
	_ = x[TYPEOF-221]
	_ = x[VAR-222]
	_ = x[VAL-223]
	_ = x[CONST-224]
	_ = x[THROW-225]
	_ = x[TRY-226]
	_ = x[CATCH-227]
	_ = x[DO-228]
	_ = x[FINALLY-229]
	_ = x[DEFER-230]
	_ = x[ALIAS-231]
	_ = x[AS-232]
	_ = x[IS-233]
	_ = x[SELF-234]
	_ = x[SUPER-235]
	_ = x[SWITCH-236]
	_ = x[CASE-237]
	_ = x[MATCH-238]
	_ = x[WITH-239]
	_ = x[USING-240]
	_ = x[BREAKPOINT-241]
	_ = x[GETTER-242]
	_ = x[SETTER-243]
	_ = x[ATTR-244]
	_ = x[MUST-245]
	_ = x[SINGLETON-246]
	_ = x[ABSTRACT-247]
	_ = x[SEALED-248]
	_ = x[VOID-249]
	_ = x[NEVER-250]
	_ = x[NOTHING-251]
	_ = x[ANY-252]
	_ = x[PRIMITIVE-253]
	_ = x[PUBLIC-254]
	_ = x[PRIVATE-255]
	_ = x[PROTECTED-256]
	_ = x[NATIVE-257]
	_ = x[DEFAULT-258]
	_ = x[MACRO-259]
	_ = x[BOOL-260]
	_ = x[NEW-261]
	_ = x[EXTERN-262]
	_ = x[IMPORT-263]
	_ = x[EXPORT-264]
	_ = x[WHERE-265]
	_ = x[UNTYPED-266]
	_ = x[UNCHECKED-267]
	_ = x[GOTO-268]
	_ = x[QUOTE-269]
	_ = x[QUOTE_EXPR-270]
	_ = x[QUOTE_TYPE-271]
	_ = x[QUOTE_PATTERN-272]
	_ = x[UNQUOTE-273]
	_ = x[UNQUOTE_EXPR-274]
	_ = x[UNQUOTE_TYPE-275]
	_ = x[UNQUOTE_IDENT-276]
	_ = x[UNQUOTE_CONST-277]
	_ = x[UNQUOTE_IVAR-278]
	_ = x[UNQUOTE_PATTERN-279]
	_ = x[UNDEFINED-280]
	_ = x[FUNC-281]
	_ = x[OVERLOAD-282]
	_ = x[UNSAFE-283]
	_ = x[LABEL_KEYWORD_END-284]
}

const _Type_name = "ZERO_VALUEERROREND_OF_FILETEXTNEWLINESEMICOLONCOMMADOTQUESTION_DOTDOT_DOTQUESTION_DOT_DOTCOLONQUESTIONLABEL_OP_BEGTHIN_ARROWWIGGLY_ARROWTHICK_ARROWLABEL_ASSIGN_OP_BEGEQUAL_OPMINUS_EQUALPLUS_EQUALSTAR_EQUALSLASH_EQUALSTAR_STAR_EQUALTILDE_EQUALAND_AND_EQUALAND_EQUALOR_OR_EQUALOR_EQUALXOR_EQUALQUESTION_QUESTION_EQUALLBITSHIFT_EQUALLTRIPLE_BITSHIFT_EQUALRBITSHIFT_EQUALRTRIPLE_BITSHIFT_EQUALPERCENT_EQUALCOLON_EQUALLABEL_ASSIGN_OP_ENDSHORT_UNQUOTE_BEGLPARENRPARENLBRACERBRACELBRACKETQUESTION_LBRACKETRBRACKETSCOPE_RES_OPCOLON_COLON_LBRACKETDOT_COLONCLOSED_RANGE_OPOPEN_RANGE_OPRIGHT_OPEN_RANGE_OPLEFT_OPEN_RANGE_OPPIPE_OPAND_ANDAND_BANGOR_OROR_BANGNOT_EQUALLAX_NOT_EQUALSTRICT_EQUALSTRICT_NOT_EQUALQUESTION_QUESTIONBANGISA_OPREVERSE_ISA_OPINSTANCE_OF_OPREVERSE_INSTANCE_OF_OPLABEL_OVERRIDABLE_OP_BEGPLUS_PLUSMINUS_MINUSPLUS_ATMINUS_ATMINUSPLUSSTARSLASHSTAR_STARLESSLESS_EQUALGREATERGREATER_EQUALSPACESHIP_OPEQUAL_EQUALLAX_EQUALTILDEANDAND_TILDEORXORLBITSHIFTLTRIPLE_BITSHIFTRBITSHIFTRTRIPLE_BITSHIFTPERCENTLABEL_OP_ENDLABEL_IDENTIFIER_BEGDOLLAR_IDENTIFIERPUBLIC_IDENTIFIERPRIVATE_IDENTIFIERPUBLIC_CONSTANTPRIVATE_CONSTANTLABEL_IDENTIFIER_ENDINSTANCE_VARIABLELABEL_LITERAL_BEGLABEL_SPECIAL_COLLECTION_LITERAL_BEGWORD_ARRAY_LIST_BEGWORD_ARRAY_LIST_ENDSYMBOL_ARRAY_LIST_BEGSYMBOL_ARRAY_LIST_ENDHEX_ARRAY_LIST_BEGHEX_ARRAY_LIST_ENDBIN_ARRAY_LIST_BEGBIN_ARRAY_LIST_ENDWORD_HASH_SET_BEGWORD_HASH_SET_ENDSYMBOL_HASH_SET_BEGSYMBOL_HASH_SET_ENDHEX_HASH_SET_BEGHEX_HASH_SET_ENDBIN_HASH_SET_BEGBIN_HASH_SET_ENDWORD_ARRAY_TUPLE_BEGWORD_ARRAY_TUPLE_ENDSYMBOL_ARRAY_TUPLE_BEGSYMBOL_ARRAY_TUPLE_ENDHEX_ARRAY_TUPLE_BEGHEX_ARRAY_TUPLE_ENDBIN_ARRAY_TUPLE_BEGBIN_ARRAY_TUPLE_ENDLABEL_SPECIAL_COLLECTION_LITERAL_ENDCLOSURE_TYPE_BEGHASH_SET_LITERAL_BEGTUPLE_LITERAL_BEGRECORD_LITERAL_BEGDOC_COMMENTRAW_STRINGCHAR_LITERALRAW_CHAR_LITERALREGEX_BEGREGEX_CONTENTREGEX_INTERP_BEGREGEX_INTERP_ENDREGEX_ENDLABEL_REGEX_FLAG_BEGREGEX_FLAG_iREGEX_FLAG_mREGEX_FLAG_UREGEX_FLAG_aREGEX_FLAG_xREGEX_FLAG_sLABEL_REGEX_FLAG_ENDSTRING_BEGSTRING_CONTENTSTRING_INTERP_LOCALSTRING_INTERP_CONSTANTSTRING_INTERP_BEGSTRING_INSPECT_INTERP_BEGSTRING_INSPECT_INTERP_CONSTANTSTRING_INSPECT_INTERP_LOCALSTRING_INTERP_ENDSTRING_ENDLABEL_INT_LITERAL_BEGINTUINTINT64UINT64INT32UINT32INT16UINT16INT8UINT8LABEL_INT_LITERAL_ENDLABEL_FLOAT_LITERAL_BEGFLOATBIG_FLOATFLOAT64FLOAT32LABEL_FLOAT_LITERAL_ENDLABEL_LITERAL_ENDLABEL_KEYWORD_BEGNILFALSETRUEIFELSEELSIFUNLESSWHILEUNTILLOOPFORFORNUMINOFBREAKCONTINUERETURNYIELDASYNCAWAITAWAIT_SYNCGODEFSIGENDTHENINITNOINITCLASSSTRUCTMODULEMIXININTERFACEINCLUDEIMPLEMENTEXTENDENUMTYPETYPEDEFTYPEOFVARVALCONSTTHROWTRYCATCHDOFINALLYDEFERALIASASISSELFSUPERSWITCHCASEMATCHWITHUSINGBREAKPOINTGETTERSETTERATTRMUSTSINGLETONABSTRACTSEALEDVOIDNEVERNOTHINGANYPRIMITIVEPUBLICPRIVATEPROTECTEDNATIVEDEFAULTMACROBOOLNEWEXTERNIMPORTEXPORTWHEREUNTYPEDUNCHECKEDGOTOQUOTEQUOTE_EXPRQUOTE_TYPEQUOTE_PATTERNUNQUOTEUNQUOTE_EXPRUNQUOTE_TYPEUNQUOTE_IDENTUNQUOTE_CONSTUNQUOTE_IVARUNQUOTE_PATTERNUNDEFINEDFUNCOVERLOADUNSAFELABEL_KEYWORD_END"

var _Type_index = [...]uint16{0, 10, 15, 26, 30, 37, 46, 51, 54, 66, 73, 89, 94, 102, 114, 124, 136, 147, 166, 174, 185, 195, 205, 216, 231, 242, 255, 264, 275, 283, 292, 315, 330, 352, 367, 389, 402, 413, 432, 449, 455, 461, 467, 473, 481, 498, 506, 518, 538, 547, 562, 575, 594, 612, 619, 626, 634, 639, 646, 655, 668, 680, 696, 713, 717, 723, 737, 751, 773, 797, 806, 817, 824, 832, 837, 841, 845, 850, 859, 863, 873, 880, 893, 905, 916, 925, 930, 933, 942, 944, 947, 956, 972, 981, 997, 1004, 1016, 1036, 1053, 1070, 1088, 1103, 1119, 1139, 1156, 1173, 1209, 1228, 1247, 1268, 1289, 1307, 1325, 1343, 1361, 1378, 1395, 1414, 1433, 1449, 1465, 1481, 1497, 1517, 1537, 1559, 1581, 1600, 1619, 1638, 1657, 1693, 1709, 1729, 1746, 1764, 1775, 1785, 1797, 1813, 1822, 1835, 1851, 1867, 1876, 1896, 1908, 1920, 1932, 1944, 1956, 1968, 1988, 1998, 2012, 2031, 2053, 2070, 2095, 2125, 2152, 2169, 2179, 2200, 2203, 2207, 2212, 2218, 2223, 2229, 2234, 2240, 2244, 2249, 2270, 2293, 2298, 2307, 2314, 2321, 2344, 2361, 2378, 2381, 2386, 2390, 2392, 2396, 2401, 2407, 2412, 2417, 2421, 2424, 2430, 2432, 2434, 2439, 2447, 2453, 2458, 2463, 2468, 2478, 2480, 2483, 2486, 2489, 2493, 2497, 2503, 2508, 2514, 2520, 2525, 2534, 2541, 2550, 2556, 2560, 2564, 2571, 2577, 2580, 2583, 2588, 2593, 2596, 2601, 2603, 2610, 2615, 2620, 2622, 2624, 2628, 2633, 2639, 2643, 2648, 2652, 2657, 2667, 2673, 2679, 2683, 2687, 2696, 2704, 2710, 2714, 2719, 2726, 2729, 2738, 2744, 2751, 2760, 2766, 2773, 2778, 2782, 2785, 2791, 2797, 2803, 2808, 2815, 2824, 2828, 2833, 2843, 2853, 2866, 2873, 2885, 2897, 2910, 2923, 2935, 2950, 2959, 2963, 2971, 2977, 2994}

func (i Type) String() string {
	if i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
