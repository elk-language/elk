package ast

// All expression nodes implement this interface.
type ExpressionNode interface {
	Node
	expressionNode()
}

func (*InvalidNode) expressionNode()                       {}
func (*UnhygienicNode) expressionNode()                    {}
func (*TypeExpressionNode) expressionNode()                {}
func (*MacroNameNode) expressionNode()                     {}
func (*InstanceVariableDeclarationNode) expressionNode()   {}
func (*VariablePatternDeclarationNode) expressionNode()    {}
func (*ValuePatternDeclarationNode) expressionNode()       {}
func (*PostfixExpressionNode) expressionNode()             {}
func (*ModifierNode) expressionNode()                      {}
func (*ModifierIfElseNode) expressionNode()                {}
func (*ModifierForInNode) expressionNode()                 {}
func (*AssignmentExpressionNode) expressionNode()          {}
func (*BinaryExpressionNode) expressionNode()              {}
func (*LogicalExpressionNode) expressionNode()             {}
func (*UnaryExpressionNode) expressionNode()               {}
func (*TrueLiteralNode) expressionNode()                   {}
func (*FalseLiteralNode) expressionNode()                  {}
func (*NilLiteralNode) expressionNode()                    {}
func (*UndefinedLiteralNode) expressionNode()              {}
func (*PublicInstanceVariableNode) expressionNode()        {}
func (*SimpleSymbolLiteralNode) expressionNode()           {}
func (*InterpolatedSymbolLiteralNode) expressionNode()     {}
func (*IntLiteralNode) expressionNode()                    {}
func (*UIntLiteralNode) expressionNode()                   {}
func (*Int64LiteralNode) expressionNode()                  {}
func (*UInt64LiteralNode) expressionNode()                 {}
func (*Int32LiteralNode) expressionNode()                  {}
func (*UInt32LiteralNode) expressionNode()                 {}
func (*Int16LiteralNode) expressionNode()                  {}
func (*UInt16LiteralNode) expressionNode()                 {}
func (*Int8LiteralNode) expressionNode()                   {}
func (*UInt8LiteralNode) expressionNode()                  {}
func (*FloatLiteralNode) expressionNode()                  {}
func (*BigFloatLiteralNode) expressionNode()               {}
func (*Float64LiteralNode) expressionNode()                {}
func (*Float32LiteralNode) expressionNode()                {}
func (*UninterpolatedRegexLiteralNode) expressionNode()    {}
func (*InterpolatedRegexLiteralNode) expressionNode()      {}
func (*CharLiteralNode) expressionNode()                   {}
func (*RawCharLiteralNode) expressionNode()                {}
func (*RawStringLiteralNode) expressionNode()              {}
func (*DoubleQuotedStringLiteralNode) expressionNode()     {}
func (*InterpolatedStringLiteralNode) expressionNode()     {}
func (*VariableDeclarationNode) expressionNode()           {}
func (*ValueDeclarationNode) expressionNode()              {}
func (*ConstantAsNode) expressionNode()                    {}
func (*MethodLookupAsNode) expressionNode()                {}
func (*PublicIdentifierNode) expressionNode()              {}
func (*UsingSubentryAsNode) expressionNode()               {}
func (*PrivateIdentifierNode) expressionNode()             {}
func (*PublicConstantNode) expressionNode()                {}
func (*PublicConstantAsNode) expressionNode()              {}
func (*PrivateConstantNode) expressionNode()               {}
func (*AsExpressionNode) expressionNode()                  {}
func (*SelfLiteralNode) expressionNode()                   {}
func (*DoExpressionNode) expressionNode()                  {}
func (*MacroBoundaryNode) expressionNode()                 {}
func (*QuoteExpressionNode) expressionNode()               {}
func (*UnquoteNode) expressionNode()                       {}
func (*SingletonBlockExpressionNode) expressionNode()      {}
func (*SwitchExpressionNode) expressionNode()              {}
func (*IfExpressionNode) expressionNode()                  {}
func (*UnlessExpressionNode) expressionNode()              {}
func (*WhileExpressionNode) expressionNode()               {}
func (*UntilExpressionNode) expressionNode()               {}
func (*LoopExpressionNode) expressionNode()                {}
func (*NumericForExpressionNode) expressionNode()          {}
func (*ForInExpressionNode) expressionNode()               {}
func (*BreakExpressionNode) expressionNode()               {}
func (*LabeledExpressionNode) expressionNode()             {}
func (*GoExpressionNode) expressionNode()                  {}
func (*ReturnExpressionNode) expressionNode()              {}
func (*YieldExpressionNode) expressionNode()               {}
func (*ContinueExpressionNode) expressionNode()            {}
func (*ThrowExpressionNode) expressionNode()               {}
func (*MustExpressionNode) expressionNode()                {}
func (*TryExpressionNode) expressionNode()                 {}
func (*AwaitExpressionNode) expressionNode()               {}
func (*TypeofExpressionNode) expressionNode()              {}
func (*ConstantDeclarationNode) expressionNode()           {}
func (*ConstantLookupNode) expressionNode()                {}
func (*MethodLookupNode) expressionNode()                  {}
func (*InstanceMethodLookupNode) expressionNode()          {}
func (*UsingAllEntryNode) expressionNode()                 {}
func (*UsingEntryWithSubentriesNode) expressionNode()      {}
func (*ClosureLiteralNode) expressionNode()                {}
func (*ClassDeclarationNode) expressionNode()              {}
func (*ModuleDeclarationNode) expressionNode()             {}
func (*MixinDeclarationNode) expressionNode()              {}
func (*InterfaceDeclarationNode) expressionNode()          {}
func (*StructDeclarationNode) expressionNode()             {}
func (*MacroDefinitionNode) expressionNode()               {}
func (*MethodDefinitionNode) expressionNode()              {}
func (*InitDefinitionNode) expressionNode()                {}
func (*MethodSignatureDefinitionNode) expressionNode()     {}
func (*GenericConstantNode) expressionNode()               {}
func (*GenericTypeDefinitionNode) expressionNode()         {}
func (*TypeDefinitionNode) expressionNode()                {}
func (*AliasDeclarationNode) expressionNode()              {}
func (*GetterDeclarationNode) expressionNode()             {}
func (*SetterDeclarationNode) expressionNode()             {}
func (*AttrDeclarationNode) expressionNode()               {}
func (*UsingExpressionNode) expressionNode()               {}
func (*IncludeExpressionNode) expressionNode()             {}
func (*ExtendWhereBlockExpressionNode) expressionNode()    {}
func (*ImplementExpressionNode) expressionNode()           {}
func (*NewExpressionNode) expressionNode()                 {}
func (*GenericConstructorCallNode) expressionNode()        {}
func (*ConstructorCallNode) expressionNode()               {}
func (*SubscriptExpressionNode) expressionNode()           {}
func (*NilSafeSubscriptExpressionNode) expressionNode()    {}
func (*ScopedMacroCallNode) expressionNode()               {}
func (*MacroCallNode) expressionNode()                     {}
func (*ReceiverlessMacroCallNode) expressionNode()         {}
func (*CallNode) expressionNode()                          {}
func (*GenericMethodCallNode) expressionNode()             {}
func (*MethodCallNode) expressionNode()                    {}
func (*GenericReceiverlessMethodCallNode) expressionNode() {}
func (*ReceiverlessMethodCallNode) expressionNode()        {}
func (*AttributeAccessNode) expressionNode()               {}
func (*DoubleSplatExpressionNode) expressionNode()         {}
func (*SplatExpressionNode) expressionNode()               {}
func (*KeyValueExpressionNode) expressionNode()            {}
func (*SymbolKeyValueExpressionNode) expressionNode()      {}
func (*ArrayListLiteralNode) expressionNode()              {}
func (*WordArrayListLiteralNode) expressionNode()          {}
func (*WordArrayTupleLiteralNode) expressionNode()         {}
func (*WordHashSetLiteralNode) expressionNode()            {}
func (*SymbolArrayListLiteralNode) expressionNode()        {}
func (*SymbolArrayTupleLiteralNode) expressionNode()       {}
func (*SymbolHashSetLiteralNode) expressionNode()          {}
func (*HexArrayListLiteralNode) expressionNode()           {}
func (*HexArrayTupleLiteralNode) expressionNode()          {}
func (*HexHashSetLiteralNode) expressionNode()             {}
func (*BinArrayListLiteralNode) expressionNode()           {}
func (*BinArrayTupleLiteralNode) expressionNode()          {}
func (*BinHashSetLiteralNode) expressionNode()             {}
func (*ArrayTupleLiteralNode) expressionNode()             {}
func (*HashSetLiteralNode) expressionNode()                {}
func (*HashMapLiteralNode) expressionNode()                {}
func (*HashRecordLiteralNode) expressionNode()             {}
func (*RangeLiteralNode) expressionNode()                  {}
func (*BoxOfExpressionNode) expressionNode()               {}
